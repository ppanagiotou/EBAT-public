
# -------------------------------------------------- #
# ----------- Symmetric key cryptography ----------- #
# -------------------------------------------------- #
[AES_ecb_encrypt]
rule = AES_ecb_encrypt; void AES_ecb_encrypt (const unsigned char *in, unsigned char *out, const AES_KEY *key, const int enc);4; 1; 1:bytes=16:14; 2:output:1; 0:none:13; 4:int:1; 3:CTX:1;

[AES_ecb_encrypt.4]
SAMEAS = AES_cbc_encrypt.6, AES_cfb128_encrypt.7, AES_cfb1_encrypt.7, AES_cfb8_encrypt.7, CRYPTO_cfb128_1_encrypt.7,
         CRYPTO_cfb128_8_encrypt.7, CRYPTO_cfb128_encrypt.7, BF_ecb_encrypt.4, BF_cbc_encrypt.7, BF_cfb64_encrypt.7,
         Camellia_ecb_encrypt.4, Camellia_cbc_encrypt.6, Camellia_cfb128_encrypt.7, Camellia_cfb1_encrypt.7,
         Camellia_cfb8_encrypt.7, CAST_ecb_encrypt.4, CAST_cbc_encrypt.6, CAST_cfb64_encrypt.7,
         DES_cfb_encrypt.7, DES_pcbc_encrypt.6, DES_cfb64_encrypt.7, DES_xcbc_encrypt.8, DES_ede2_cbc_encrypt.7,
         DES_ede2_cfb64_encrypt.8, DES_ede3_cbc_encrypt.8, des_ede3_cbc_encrypt.8, DES_ede3_cfb64_encrypt.9,
         DES_cbc_encrypt.6, des_cbc_encrypt.6, DES_ncbc_encrypt.6, des_ncbc_encrypt.6, DES_ecb_encrypt.4,
         DES_ecb2_encrypt.5, DES_ecb3_encrypt.6, DES_encrypt1.3, DES_encrypt2.3, RC2_ecb_encrypt.4, RC2_cbc_encrypt.6,
         RC2_cfb64_encrypt.7, EVP_CipherInit.5, EVP_CipherInit_ex.6, wc_AesSetKey.5, wc_AesSetKeyDirect.5,
         wc_Des3_SetKey.4, rc4_init_key.4, BIO_set_cipher.5, mbedtls_aes_crypt_ecb.2, mbedtls_aes_crypt_cbc.2, mbedtls_aes_crypt_xts.2,
         mbedtls_aes_crypt_cfb128.2, mbedtls_aes_crypt_cfb8.2, mbedtls_aes_crypt_ofb.2, mbedtls_blowfish_crypt_ecb.2,
         mbedtls_blowfish_crypt_cbc.2, mbedtls_blowfish_crypt_cfb64.2, mbedtls_camellia_crypt_ecb.2,
         mbedtls_camellia_crypt_cfb128.2, mbedtls_des_crypt_cbc.2, mbedtls_des3_crypt_cbc.2, mbedtls_gcm_crypt_and_tag.2,
         mbedtls_gcm_starts.2, mbedtls_camellia_crypt_cbc.2, WolfSSL_EVP_CipherInit.5, mbedtls_pkcs12_pbe.2,
         mbedtls_pkcs12_pbe_sha1_rc4_128.2, mbedtls_pkcs5_pbes2.2, PKCS5_v2_PBE_keyivgen.7, PKCS5_v2_PBKDF2_keyivgen.7,
         PKCS5_PBE_keyivgen.7, PKCS12_PBE_keyivgen.7

ENCRYPT = 1
DECRYPT = 0

[mbedtls_cipher_setkey]
rule = mbedtls_cipher_setkey; int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,  const unsigned char *key,  int key_bitlen, const mbedtls_operation_t operation );4; 1; 1:CTX:1; 2:bytes:11; 3:bit:0; 3<2;

[mbedtls_cipher_setkey.3]
SAMEAS = AES_set_encrypt_key.2, AES_set_decrypt_key.2, Camellia_set_key.2, mbedtls_aes_setkey_enc.3, mbedtls_aes_setkey_dec.3, mbedtls_aes_xts_setkey_enc.3, mbedtls_aes_xts_setkey_dec.3,
         mbedtls_blowfish_setkey.3, mbedtls_camellia_setkey_enc.3, mbedtls_camellia_setkey_dec.3, mbedtls_ccm_setkey.4, mbedtls_gcm_setkey.4, EVP_PKEY_CTX_set_rsa_keygen_bits.2,
         RSA_generate_key.1, RSA_generate_key_ex.2, CyaSSL_RSA_generate_key_ex.2
KEYSIZE = bits

[EVP_CIPHER_CTX_set_key_length]
rule = EVP_CIPHER_CTX_set_key_length; int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *x, int keylen); 2; 1; 1:CTX:1; 2:int:1;

[EVP_CIPHER_CTX_set_key_length.2]
SAMEAS = RC2_set_key.2, gcry_cipher_setkey.3, BF_set_key.2, CAST_set_key.2, wc_AesSetKey.3, wc_AesSetKeyDirect.3, wc_CamelliaSetKey.3, RC4_set_key.2, CipherSetKey.3,
         des_setup.2, deskey.2, twofish_setup.2, blowfish_setup.2, rijndael_setup.2, serpent_setup.2, ecb_start.3, cfb_start.4, cbc_start.4, ctr_start.4,
         mbedtls_arc4_setup.3, EVP_AEAD_CTX_init.4, wc_AesGcmSetKey.3, wc_AesCcmSetKey.3
KEYSIZE = bytes

[mbedtls_cipher_set_iv]
rule = mbedtls_cipher_set_iv; int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx, const unsigned char *iv, size_t iv_len ); 3; 1; 2:bytes:12; 3:byte:0; 3<2; 1:CTX:1;

[mbedtls_cipher_set_iv.3]
SAMEAS = gcry_cipher_setiv.3, gcry_cipher_setctr.3, cfb_setiv.2, cbc_setiv.2, ctr_setiv.2, mbedtls_cipher_set_iv.3, mbedtls_cipher_crypt.3,
         EVP_AEAD_CTX_open.6, EVP_AEAD_CTX_seal.6, wc_AesGcmSetKey.4, wc_AesGcmDecrypt.4, wc_AesCcmEncrypt.4, wc_AesCcmDecrypt.4, mbedtls_ccm_encrypt_and_tag.4,
         mbedtls_ccm_star_encrypt_and_tag.4, mbedtls_ccm_auth_decrypt.4, mbedtls_ccm_star_auth_decrypt.4, mbedtls_cipher_auth_encrypt.3, mbedtls_cipher_auth_decrypt.3,
         mbedtls_gcm_crypt_and_tag.5, mbedtls_gcm_auth_decrypt.4, mbedtls_gcm_starts.4
IVSIZE = bytes


[EVP_get_cipherbyname]
rule = EVP_get_cipherbyname; const EVP_CIPHER *EVP_get_cipherbyname(const char *name);1; 1; 1:string:1;

[EVP_get_cipherbyname.1]
SAMEAS = find_cipher.1
CIPHER = TAINT

[mbedtls_cipher_info_from_type]
rule = mbedtls_cipher_info_from_type; const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type); 1; 1; 1:int:1;

[mbedtls_cipher_info_from_type.1]
SAMEAS = mbedtls_cipher_setup.2
MBEDTLS_CIPHER_NONE = 0
MBEDTLS_CIPHER_NULL = 1
MBEDTLS_CIPHER_AES_128_ECB = 2
MBEDTLS_CIPHER_AES_192_ECB = 3
MBEDTLS_CIPHER_AES_256_ECB = 4
MBEDTLS_CIPHER_AES_128_CBC = 5
MBEDTLS_CIPHER_AES_192_CBC = 6
MBEDTLS_CIPHER_AES_256_CBC = 7
MBEDTLS_CIPHER_AES_128_CFB128 = 8
MBEDTLS_CIPHER_AES_192_CFB128 = 9
MBEDTLS_CIPHER_AES_256_CFB128 = 10
MBEDTLS_CIPHER_AES_128_CTR = 11
MBEDTLS_CIPHER_AES_192_CTR = 12
MBEDTLS_CIPHER_AES_256_CTR = 13
MBEDTLS_CIPHER_AES_128_GCM = 14
MBEDTLS_CIPHER_AES_192_GCM = 15
MBEDTLS_CIPHER_AES_256_GCM = 16
MBEDTLS_CIPHER_CAMELLIA_128_ECB = 17
MBEDTLS_CIPHER_CAMELLIA_192_ECB = 18
MBEDTLS_CIPHER_CAMELLIA_256_ECB = 19
MBEDTLS_CIPHER_CAMELLIA_128_CBC = 20
MBEDTLS_CIPHER_CAMELLIA_192_CBC = 21
MBEDTLS_CIPHER_CAMELLIA_256_CBC = 22
MBEDTLS_CIPHER_CAMELLIA_128_CFB128 = 23
MBEDTLS_CIPHER_CAMELLIA_192_CFB128 = 24
MBEDTLS_CIPHER_CAMELLIA_256_CFB128 = 25
MBEDTLS_CIPHER_CAMELLIA_128_CTR = 26
MBEDTLS_CIPHER_CAMELLIA_192_CTR = 27
MBEDTLS_CIPHER_CAMELLIA_256_CTR = 28
MBEDTLS_CIPHER_CAMELLIA_128_GCM = 29
MBEDTLS_CIPHER_CAMELLIA_192_GCM = 30
MBEDTLS_CIPHER_CAMELLIA_256_GCM = 31
MBEDTLS_CIPHER_DES_ECB = 32
MBEDTLS_CIPHER_DES_CBC = 33
MBEDTLS_CIPHER_DES_EDE_ECB = 34
MBEDTLS_CIPHER_DES_EDE_CBC = 35
MBEDTLS_CIPHER_DES_EDE3_ECB = 36
MBEDTLS_CIPHER_DES_EDE3_CBC = 37
MBEDTLS_CIPHER_BLOWFISH_ECB = 38
MBEDTLS_CIPHER_BLOWFISH_CBC = 39
MBEDTLS_CIPHER_BLOWFISH_CFB64 = 40
MBEDTLS_CIPHER_BLOWFISH_CTR = 41
MBEDTLS_CIPHER_ARC4_128 = 42
MBEDTLS_CIPHER_AES_128_CCM = 43
MBEDTLS_CIPHER_AES_192_CCM=  44
MBEDTLS_CIPHER_AES_256_CCM = 45
MBEDTLS_CIPHER_CAMELLIA_128_CCM = 46
MBEDTLS_CIPHER_CAMELLIA_192_CCM = 47
MBEDTLS_CIPHER_CAMELLIA_256_CCM = 48


[mbedtls_cipher_info_from_values]
rule = mbedtls_cipher_info_from_values; const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id, int key_bitlen, const mbedtls_cipher_mode_t mode ); 3; 1; 1:int:1; 2:int:40; 3:int:3;

[mbedtls_cipher_info_from_values.1]
SAMEAS = mbedtls_gcm_setkey.2

MBEDTLS_CIPHER_ID_NONE = 0
MBEDTLS_CIPHER_ID_NULL = 1
MBEDTLS_CIPHER_ID_AES = 2
MBEDTLS_CIPHER_ID_DES = 3
MBEDTLS_CIPHER_ID_3DES = 4
MBEDTLS_CIPHER_ID_CAMELLIA = 5
MBEDTLS_CIPHER_ID_BLOWFISH = 6
MBEDTLS_CIPHER_ID_ARC4 = 7
# } mbedtls_cipher_id_t;

[mbedtls_cipher_info_from_values.3]
# typedef enum {
MBEDTLS_MODE_NONE = 0
MBEDTLS_MODE_ECB = 1
MBEDTLS_MODE_CBC = 2
MBEDTLS_MODE_CFB = 3
# /* Unused! */
MBEDTLS_MODE_OFB = 4
MBEDTLS_MODE_CTR = 5
MBEDTLS_MODE_GCM = 6
MBEDTLS_MODE_STREAM = 7
MBEDTLS_MODE_CCM = 8
# } mbedtls_cipher_mode_t;

[gnutls_x509_crt_privkey_sign]
rule = gnutls_x509_crt_privkey_sign; int gnutls_x509_crt_privkey_sign(gnutls_x509_crt_t crt, gnutls_x509_crt_t issuer, gnutls_privkey_t issuer_key, gnutls_digest_algorithm_t dig, unsigned int flags);5; 3; 4:int:33

[gnutls_x509_crt_privkey_sign.4]
SAMEAS = gnutls_x509_crt_get_fingerprint.2

GNUTLS_DIG_UNKNOWN = 0
GNUTLS_DIG_NULL = 1
GNUTLS_DIG_MD5 = 2
GNUTLS_DIG_SHA1 = 3
GNUTLS_DIG_RMD160 = 4
GNUTLS_DIG_MD2 = 5
GNUTLS_DIG_SHA256 = 6
GNUTLS_DIG_SHA384 = 7
GNUTLS_DIG_SHA512 = 8
GNUTLS_DIG_SHA224 = 9
GNUTLS_DIG_SHA3_224 = 10
GNUTLS_DIG_SHA3_256 = 11
GNUTLS_DIG_SHA3_384 = 12
GNUTLS_DIG_SHA3_512 = 13
GNUTLS_DIG_MD5_SHA1 = 14
GNUTLS_DIG_GOSTR_94 = 15
GNUTLS_DIG_STREEBOG_256 = 16
GNUTLS_DIG_STREEBOG_512 = 17
GNUTLS_DIG_SHAKE_128 = 209
GNUTLS_DIG_SHAKE_256 = 210

[mbedtls_gcm_setkey]
rule = mbedtls_gcm_setkey; int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx, mbedtls_cipher_id_t cipher, const unsigned char *key, unsigned int keybits ); 4; 2; 1:CTX:2; 2:int:2; 3:bytes:21; 4:bit:0; 4<3;

[EVP_get_digestbyname]
rule = EVP_get_digestbyname;  const EVP_MD *EVP_get_digestbyname(const char *name); 1; 8; 1:string:1;

[EVP_get_digestbyname.1]
SAMEAS = mbedtls_md_info_from_string.1, gcry_md_map_name.1
HASH_FUNCTION = TAINT

[gcry_cipher_open]
rule = gcry_cipher_open; gcry_error_t gcry_cipher_open (gcry_cipher_hd_t *hd, int algo, int mode, unsigned int flags);4; 1; 1:CTX:1; 2:CTYPE:1; 3:CTYPE:1;

[gcry_cipher_open.2]
SAMEAS = gcry_cipher_algo_name.1, gcry_cipher_setiv.1, gcry_cipher_setctr.1, gcry_cipher_setkey.1,
         gcry_cipher_encrypt.1, gcry_cipher_decrypt.1, gcry_cipher_ctl.1

# /* All symmetric encryption algorithms are identified by their IDs.
# More IDs may be registered at runtime. */
# enum gcry_cipher_algos
#  {
GCRY_CIPHER_NONE        = 0
GCRY_CIPHER_IDEA        = 1
GCRY_CIPHER_3DES        = 2
GCRY_CIPHER_CAST5       = 3
GCRY_CIPHER_BLOWFISH    = 4
GCRY_CIPHER_SAFER_SK128 = 5
GCRY_CIPHER_DES_SK      = 6
GCRY_CIPHER_AES         = 7
GCRY_CIPHER_AES192      = 8
GCRY_CIPHER_AES256      = 9
GCRY_CIPHER_TWOFISH     = 10

#    /* Other cipher numbers are above 300 for OpenPGP reasons. */
#/* Fully compatible with RSA's RC4 (tm). */
GCRY_CIPHER_ARCFOUR     = 301
#/* Yes, this is single key 56 bit DES. */
GCRY_CIPHER_DES         = 302
GCRY_CIPHER_TWOFISH128  = 303
GCRY_CIPHER_SERPENT128  = 304
GCRY_CIPHER_SERPENT192  = 305
GCRY_CIPHER_SERPENT256  = 306
#  /* Ron's Cipher 2 (40 bit). */
GCRY_CIPHER_RFC2268_40  = 307
# /* Ron's Cipher 2 (128 bit). */
GCRY_CIPHER_RFC2268_128 = 308
# /* 128 bit cipher described in RFC4269. */
GCRY_CIPHER_SEED        = 309
GCRY_CIPHER_CAMELLIA128 = 310
GCRY_CIPHER_CAMELLIA192 = 311
GCRY_CIPHER_CAMELLIA256 = 312
GCRY_CIPHER_SALSA20     = 313
GCRY_CIPHER_SALSA20R12  = 314
GCRY_CIPHER_GOST28147   = 315
GCRY_CIPHER_CHACHA20    = 316
#  };

# /* The Rijndael algorithm is basically AES, so provide some macros. */
#define GCRY_CIPHER_AES128      GCRY_CIPHER_AES
#define GCRY_CIPHER_RIJNDAEL    GCRY_CIPHER_AES
#define GCRY_CIPHER_RIJNDAEL128 GCRY_CIPHER_AES128
#define GCRY_CIPHER_RIJNDAEL192 GCRY_CIPHER_AES192
#define GCRY_CIPHER_RIJNDAEL256 GCRY_CIPHER_AES256

[gcry_cipher_open.3]
#/* The supported encryption modes.  Note that not all of them are
#   supported for each algorithm. */
#enum gcry_cipher_modes
#  {
#/* Not yet specified. */
GCRY_CIPHER_MODE_NONE     = 0
#/* Electronic codebook. */
GCRY_CIPHER_MODE_ECB      = 1
#/* Cipher feedback. */
GCRY_CIPHER_MODE_CFB      = 2
#/* Cipher block chaining. */
GCRY_CIPHER_MODE_CBC      = 3
#/* Used with stream ciphers. */
GCRY_CIPHER_MODE_STREAM   = 4
#/* Outer feedback. */
GCRY_CIPHER_MODE_OFB      = 5
#/* Counter. */
GCRY_CIPHER_MODE_CTR      = 6
#/* AES-WRAP algorithm.  */
GCRY_CIPHER_MODE_AESWRAP  = 7
#/* Counter with CBC-MAC.  */
GCRY_CIPHER_MODE_CCM      = 8
#/* Galois Counter Mode. */
GCRY_CIPHER_MODE_GCM      = 9
#/* Poly1305 based AEAD mode. */
GCRY_CIPHER_MODE_POLY1305 = 10
#/* OCB3 mode.  */
GCRY_CIPHER_MODE_OCB      = 11
#/* Cipher feedback (8 bit mode). */
GCRY_CIPHER_MODE_CFB8     = 12
#/* XTS mode.  */
GCRY_CIPHER_MODE_XTS      = 13
#  };
# TODO (future): Map flags bitwise
[gcry_cipher_open.4]
#/* Flags used with the open function. */
#enum gcry_cipher_flags
#  {
#  /* Allocate in secure memory. */
GCRY_CIPHER_SECURE      = 1
#  /* Enable CFB sync mode. */
GCRY_CIPHER_ENABLE_SYNC = 2
# /* Enable CBC cipher text stealing (CTS). */
GCRY_CIPHER_CBC_CTS     = 4
# /* Enable CBC message auth. code (MAC). */
GCRY_CIPHER_CBC_MAC     = 8
#  };
[mbedtls_cipher_set_padding_mode]
rule = mbedtls_cipher_set_padding_mode; int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode ); 2; 1; 1:CTX:1; 2:int:16;

[mbedtls_cipher_set_padding_mode. 2]
# /**< PKCS7 padding (default)        */
MBEDTLS_PADDING_PKCS7 = 0,
# /**< ISO/IEC 7816-4 padding         */
MBEDTLS_PADDING_ONE_AND_ZEROS = 1
# /**< ANSI X.923 padding             */
MBEDTLS_PADDING_ZEROS_AND_LEN = 2
# /**< zero padding (not reversible!) */
MBEDTLS_PADDING_ZEROS = 3
# /**< never pad (full blocks only)   */
MBEDTLS_PADDING_NONE = 4

# OpenSSL rsa padding
# define RSA_PKCS1_PADDING       1
# define RSA_SSLV23_PADDING      2
# define RSA_NO_PADDING          3
# define RSA_PKCS1_OAEP_PADDING  4
# define RSA_X931_PADDING        5
# /* EVP_PKEY_ only */
# define RSA_PKCS1_PSS_PADDING   6
# define RSA_PKCS1_WITH_TLS_PADDING 7
# define RSA_PKCS1_PADDING_SIZE  11

[RSA_public_encrypt]
rule = RSA_public_encrypt; int RSA_public_encrypt(int flen, unsigned char *from,  unsigned char *to, RSA *rsa, int padding); 5; 3; 5:int:31

[RSA_public_encrypt.5]
SAMEAS = RSA_private_decrypt.5, RSA_private_encrypt.5, RSA_public_decrypt.5, EVP_PKEY_CTX_set_rsa_padding.2

# OpenSSL rsa padding
RSA_PKCS1_PADDING       = 1
RSA_SSLV23_PADDING      = 2
RSA_NO_PADDING          = 3
RSA_PKCS1_OAEP_PADDING  = 4
RSA_X931_PADDING        = 5
# /* EVP_PKEY_ only */
RSA_PKCS1_PSS_PADDING   = 6
RSA_PKCS1_WITH_TLS_PADDING = 7
RSA_PKCS1_PADDING_SIZE  = 11

WEAK_PADDINGS = ['RSA_NO_PADDING', 'RSA_PKCS1_PADDING', 'RSA_SSLV23_PADDING']

[wc_RsaPublicEncrypt_ex]
rule = wc_RsaPublicEncrypt_ex; int  wc_RsaPublicEncrypt_ex(const byte* in, word32 inLen, byte* out, word32 outLen, RsaKey* key, WC_RNG* rng, int type, enum wc_HashType hash, int mgf, byte* label, word32 lableSz);11; 3; 7:int:31

[wc_RsaPublicEncrypt_ex.7]
SAMEAS = wc_RsaPrivateDecrypt_ex.6, wc_RsaPrivateDecryptInline_ex.5, wc_RsaDirect.6
# /* Padding types */
WC_RSA_PKCSV15_PAD = 0
WC_RSA_OAEP_PAD = 1
WC_RSA_PSS_PAD = 2

WEAK_PADDINGS = ['WC_RSA_PKCSV15_PAD']

[mbedtls_rsa_set_padding]
rule = mbedtls_rsa_set_padding; void mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding, int hash_id ); 3; 3; 1:CTX:3; 2:int:31; 3:int:40;

[mbedtls_rsa_set_padding.2]
SAMEAS = mbedtls_rsa_init.2

MBEDTLS_RSA_PKCS_V15 = 0
# v21 is OAEP
MBEDTLS_RSA_PKCS_V21 = 1
WEAK_PADDINGS = ['MBEDTLS_RSA_PKCS_V15']

[crypt]
rule = crypt; char * crypt(char * __key, char * __salt);2 ; 9; 1:string:91; 2:string:92

[crypt_r]
rule = crypt_r; char * crypt_r (const char *phrase, const char *salt, struct crypt_data *data); 3; 9; 1:string:91; 2:string:92

[crypt.2]
SAMEAS = crypt_r.2

MD5 = $1$
BCRYPT_OBSOLETE = $2$
# Blowfish hashing, bcrypt
BCRYPT_2A = $2a$
BCRYPT_2B = $2b$
SHA256 = $5$
SHA512 = $6$

[gcry_md_open]
rule = gcry_md_open; gcry_error_t gcry_md_open (gcry_md_hd_t *hd, int algo, unsigned int flags);3; 8; 1:CTX:8; 2:CTYPE:8; 3:int:8
#/************************************
# *                                  *
# *   Cryptograhic Hash Functions    *
# *                                  *
# ************************************/

[gcry_md_hash_buffer]
rule = gcry_md_hash_buffer; void gcry_md_hash_buffer (int algo, void *digest, const void *buffer, size_t length); 4; 8; 1:CTYPE:8; 2:output:8; 3:bytes:81; 4:int:0; 4<3;

[gcry_md_read]
rule = gcry_md_read; unsigned char * gcry_md_read (gcry_md_hd_t h, int algo);2; 8; 1:CTX:8; 2:CTYPE:8;

[gcry_md_enable]
rule = gcry_md_enable; gcry_error_t gcry_md_enable (gcry_md_hd_t h, int algo);2; 8; 1:CTX:8; 2:CTYPE:8;

[gcry_md_extract]
rule = gcry_md_extract; gpg_err_code_t gcry_md_extract (gcry_md_hd_t h, int algo, void *buffer, size_t length);4; 8; 0:none:8;

[gcry_md_open.2]
SAMEAS = gcry_md_read.2, gcry_md_enable.2, gcry_md_extract.2, gcry_md_hash_buffers.2, gcry_md_hash_buffer.1,
         gcry_kdf_derive.4, gcry_md_algo_name.1
#/* Algorithm IDs for the hash functions we know about. Not all of them
#   are implemented. */
#enum gcry_md_algos
#  {
GCRY_MD_NONE    = 0
GCRY_MD_MD5     = 1
GCRY_MD_SHA1    = 2
GCRY_MD_RMD160  = 3
GCRY_MD_MD2     = 5
# /* TIGER/192 as used by gpg <= 1.3.2. */
GCRY_MD_TIGER   = 6
#/* HAVAL, 5 pass, 160 bit. */
GCRY_MD_HAVAL   = 7
GCRY_MD_SHA256  = 8
GCRY_MD_SHA384  = 9
GCRY_MD_SHA512  = 10
GCRY_MD_SHA224  = 11

GCRY_MD_MD4           = 301
GCRY_MD_CRC32         = 302
GCRY_MD_CRC32_RFC1510 = 303
GCRY_MD_CRC24_RFC2440 = 304
GCRY_MD_WHIRLPOOL     = 305
# /* TIGER fixed.  */
GCRY_MD_TIGER1        = 306
# /* TIGER2 variant.   */
GCRY_MD_TIGER2        = 307
# /* GOST R 34.11-94.  */
GCRY_MD_GOSTR3411_94  = 308
# /* GOST R 34.11-2012, 256 bit.  */
GCRY_MD_STRIBOG256    = 309
# /* GOST R 34.11-2012, 512 bit.  */
GCRY_MD_STRIBOG512    = 310
# /* GOST R 34.11-94 with CryptoPro-A S-Box.  */
GCRY_MD_GOSTR3411_CP  = 311
GCRY_MD_SHA3_224      = 312
GCRY_MD_SHA3_256      = 313
GCRY_MD_SHA3_384      = 314
GCRY_MD_SHA3_512      = 315
GCRY_MD_SHAKE128      = 316
GCRY_MD_SHAKE256      = 317
GCRY_MD_BLAKE2B_512   = 318
GCRY_MD_BLAKE2B_384   = 319
GCRY_MD_BLAKE2B_256   = 320
GCRY_MD_BLAKE2B_160   = 321
GCRY_MD_BLAKE2S_256   = 322
GCRY_MD_BLAKE2S_224   = 323
GCRY_MD_BLAKE2S_160   = 324
GCRY_MD_BLAKE2S_128   = 325
#  };

# TODO (future): Map flags bitwise
[gcry_md_open.3]
#/* Flags used with the open function.  */
#enum gcry_md_flags
#  {
# /* Allocate all buffers in "secure" memory.  */
GCRY_MD_FLAG_SECURE = 1
# /* Make an HMAC out of this algorithm.  */
GCRY_MD_FLAG_HMAC   = 2
GCRY_MD_FLAG_BUGEMU1 = 0x0100
#  };

[gcry_cipher_ctl]

rule = gcry_cipher_ctl; gcry_error_t gcry_cipher_ctl (gcry_cipher_hd_t h, int cmd, void *buffer, size_t buflen);4; 1; 1:CTX:1; 2:int:1; 3:bytes:1; 4:byte:0; 4<3

[gcry_cipher_ctl.2]
# /* Codes used with the gcry_control function. */
# enum gcry_ctl_cmds
# {
#    /* Note: 1 .. 2 are not anymore used. */
GCRYCTL_CFB_SYNC = 3
#  /* e.g. for MDs */
GCRYCTL_RESET    = 4
GCRYCTL_FINALIZE = 5
GCRYCTL_GET_KEYLEN = 6
GCRYCTL_GET_BLKLEN = 7
GCRYCTL_TEST_ALGO = 8
GCRYCTL_IS_SECURE = 9
GCRYCTL_GET_ASNOID = 10
GCRYCTL_ENABLE_ALGO = 11
GCRYCTL_DISABLE_ALGO = 12
GCRYCTL_DUMP_RANDOM_STATS = 13
GCRYCTL_DUMP_SECMEM_STATS = 14
GCRYCTL_GET_ALGO_NPKEY    = 15
GCRYCTL_GET_ALGO_NSKEY    = 16
GCRYCTL_GET_ALGO_NSIGN    = 17
GCRYCTL_GET_ALGO_NENCR    = 18
GCRYCTL_SET_VERBOSITY     = 19
GCRYCTL_SET_DEBUG_FLAGS   = 20
GCRYCTL_CLEAR_DEBUG_FLAGS = 21
GCRYCTL_USE_SECURE_RNDPOOL= 22
GCRYCTL_DUMP_MEMORY_STATS = 23
GCRYCTL_INIT_SECMEM       = 24
GCRYCTL_TERM_SECMEM       = 25
GCRYCTL_DISABLE_SECMEM_WARN = 27
GCRYCTL_SUSPEND_SECMEM_WARN = 28
GCRYCTL_RESUME_SECMEM_WARN  = 29
GCRYCTL_DROP_PRIVS          = 30
GCRYCTL_ENABLE_M_GUARD      = 31
GCRYCTL_START_DUMP          = 32
GCRYCTL_STOP_DUMP           = 33
GCRYCTL_GET_ALGO_USAGE      = 34
GCRYCTL_IS_ALGO_ENABLED     = 35
GCRYCTL_DISABLE_INTERNAL_LOCKING = 36
GCRYCTL_DISABLE_SECMEM      = 37
GCRYCTL_INITIALIZATION_FINISHED = 38
GCRYCTL_INITIALIZATION_FINISHED_P = 39
GCRYCTL_ANY_INITIALIZATION_P = 40
GCRYCTL_SET_CBC_CTS = 41
GCRYCTL_SET_CBC_MAC = 42
# /* Note: 43 is not anymore used. */
GCRYCTL_ENABLE_QUICK_RANDOM = 44
GCRYCTL_SET_RANDOM_SEED_FILE = 45
GCRYCTL_UPDATE_RANDOM_SEED_FILE = 46
GCRYCTL_SET_THREAD_CBS = 47
GCRYCTL_FAST_POLL = 48
GCRYCTL_SET_RANDOM_DAEMON_SOCKET = 49
GCRYCTL_USE_RANDOM_DAEMON = 50
GCRYCTL_FAKED_RANDOM_P = 51
GCRYCTL_SET_RNDEGD_SOCKET = 52
GCRYCTL_PRINT_CONFIG = 53
GCRYCTL_OPERATIONAL_P = 54
GCRYCTL_FIPS_MODE_P = 55
GCRYCTL_FORCE_FIPS_MODE = 56
GCRYCTL_SELFTEST = 57
# /* Note: 58 .. 62 are used internally.  */
GCRYCTL_DISABLE_HWF = 63
GCRYCTL_SET_ENFORCED_FIPS_FLAG = 64
GCRYCTL_SET_PREFERRED_RNG_TYPE = 65
GCRYCTL_GET_CURRENT_RNG_TYPE = 66
GCRYCTL_DISABLE_LOCKED_SECMEM = 67
GCRYCTL_DISABLE_PRIV_DROP = 68
GCRYCTL_SET_CCM_LENGTHS = 69
GCRYCTL_CLOSE_RANDOM_DEVICE = 70
GCRYCTL_INACTIVATE_FIPS_FLAG = 71
GCRYCTL_REACTIVATE_FIPS_FLAG = 72
GCRYCTL_SET_SBOX = 73
GCRYCTL_DRBG_REINIT = 74
GCRYCTL_SET_TAGLEN = 75
GCRYCTL_GET_TAGLEN = 76
GCRYCTL_REINIT_SYSCALL_CLAMP = 77
# };
[mbedtls_md]
rule = mbedtls_md; int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen, unsigned char *output ); 8; 1:int:8; 2:bytes:81; 3:byte:0; 3<2; 4:output:1;

[mbedtls_md.1]
SAMEAS = mbedtls_md_init_ctx.2, mbedtls_md_setup.2, mbedtls_md_info_from_type.1, mbedtls_hkdf.1, mbedtls_pkcs12_derivation.7
# mbedtls hash
MBEDTLS_MD_NONE = 0
MBEDTLS_MD_MD2 = 1
MBEDTLS_MD_MD4 = 2
MBEDTLS_MD_MD5 = 3
MBEDTLS_MD_SHA1 = 4
MBEDTLS_MD_SHA224 = 5
MBEDTLS_MD_SHA256 = 6
MBEDTLS_MD_SHA384 = 7
MBEDTLS_MD_SHA512 = 8
MBEDTLS_MD_RIPEMD160 = 9

[mbedtls_md_setup.3]
MBEDTLS_HMAC = 1

[gcry_randomize]
rule = gcry_randomize; void gcry_randomize (unsigned char *buffer, size_t length, enum gcry_random_level level); 3; 6; 0:none:6; 3:int:2
[gcry_randomize.3]
SAMEAS = gcry_random_bytes.2
#typedef enum gcry_random_level
#  {
GCRY_WEAK_RANDOM = 0
GCRY_STRONG_RANDOM = 1
GCRY_VERY_STRONG_RANDOM = 2
#  }

[gcry_random_bytes]
rule = gcry_random_bytes; void * gcry_random_bytes (size_t nbytes, enum gcry_random_level level); 2; 6; 0:none 6; 2:int:2

[wc_HmacSetKey]
rule = wc_HmacSetKey; int 	wc_HmacSetKey (Hmac *, int type, const byte *key, word32 keySz);4:7; 1:CTX:7; 2:CTYPE:7; 3:bytes:72; 4:byte:0; 4<3;

[wc_HmacSetKey.2]
SAMEAS = wc_HKDF.1, wc_PBKDF2.8, wc_PBKDF1.8, wc_PKCS12_PBKDF.8, wc_PKCS12_PBKDF_ex.8

WC_HASH_TYPE_NONE = 0
WC_HASH_TYPE_MD2 = 1
WC_HASH_TYPE_MD4 = 2
WC_HASH_TYPE_MD5 = 3
# /* SHA-1 (not old SHA-0) */
WC_HASH_TYPE_SHA = 4
WC_HASH_TYPE_SHA224 = 5
WC_HASH_TYPE_SHA256 = 6
WC_HASH_TYPE_SHA384 = 7
WC_HASH_TYPE_SHA512 = 8
WC_HASH_TYPE_MD5_SHA = 9
WC_HASH_TYPE_SHA3_224 = 10
WC_HASH_TYPE_SHA3_256 = 11
WC_HASH_TYPE_SHA3_384 = 12
WC_HASH_TYPE_SHA3_512 = 13
WC_HASH_TYPE_BLAKE2B = 14
WC_HASH_TYPE_BLAKE2S = 15

[wc_HKDF]
rule = wc_HKDF; int wc_HKDF (int type, const byte *inKey, word32 inKeySz, const byte *salt, word32 saltSz, const byte *info, word32 infoSz, byte *out, word32 outSz);9: 9; 1:CTYPE:9; 2:bytes:92; 3:byte:0; 3<2; 4:bytes:92; 5:byte:0; 5<4; 9:output:9

[gcry_kdf_derive]
rule = gcry_kdf_derive; gpg_error_t gcry_kdf_derive ( const void *passphrase, size_t passphraselen, int algo, int subalgo, const void *salt, size_t saltlen, unsigned long iterations, size_t keysize, void *keybuffer ); 9:9; 1:bytes:91; 2:byte:0; 2<1; 3:CTYPE:92; 4:CTYPE:9; 5:bytes:92; 6:byte:0; 6<5; 7:int:93; 9:output:9;

[gcry_kdf_derive.5]
SALT = NULL
DESCRIPTION = Depends on the underlying algorithm


[gcry_kdf_derive.3]
# /******************************
# *                            *
# *  Key Derivation Functions  *
# *                            *
# ******************************/

#/* Algorithm IDs for the KDFs.  */
#enum gcry_kdf_algos
#  {
GCRY_KDF_NONE = 0
GCRY_KDF_SIMPLE_S2K = 16
GCRY_KDF_SALTED_S2K = 17
GCRY_KDF_ITERSALTED_S2K = 19
GCRY_KDF_PBKDF1 = 33
GCRY_KDF_PBKDF2 = 34
GCRY_KDF_SCRYPT = 48
#  };

[EVP_BytesToKey.3]
SALT = NULL
DESCRIPTION = No salt is used

[PKCS5_PBKDF2_HMAC]
rule = PKCS5_PBKDF2_HMAC; int PKCS5_PBKDF2_HMAC(const char *pass, int passlen, const unsigned char *salt, int saltlen, int iter,  const EVP_MD *digest, int keylen, unsigned char *out); 8; 9; 1:bytes:91; 2:byte:0; 2<1; 3:bytes:92; 4:byte:0; 4<3; 5:int:93; 6:CTYPE:9; 8:output:9;
[PKCS5_PBKDF2_HMAC.3]
SALT = NULL
DESCRIPTION = No salt is used

[PKCS5_PBKDF2_HMAC_SHA1]
rule = PKCS5_PBKDF2_HMAC_SHA1; int PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen, const unsigned char *salt, int saltlen, int iter, int keylen, unsigned char *out); 7; 9; 1:bytes:91; 2:byte:0; 2<1; 3:bytes:92; 4:byte:0; 4<3; 5:int:93; 7:output:9;

[PKCS5_PBKDF2_HMAC_SHA1.3]
SALT = NULL
DESCRIPTION = No salt is used

[HMAC_Init_ex]
rule = HMAC_Init_ex; int HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int key_len,const EVP_MD *md, ENGINE *impl);5;7; 1:CTX:7; 2:bytes:72; 3:byte:0; 3<2; 4:CTX:7;

[HMAC_Init_ex.3]
SAMEAS = HMAC.3, HMAC_Init.3, HMAC_Init_ex.3, hmac_init.4, wc_HmacSetKey.4, HmacSetKey.4, gcry_md_setkey.3, mbedtls_md_hmac_starts.3, mbedtls_md_hmac.3,
         EVP_CIPHER_CTX_set_key_length.2, gcry_mac_setkey.3, PKCS5_PBKDF2_HMAC_SHA1.6,  PKCS5_PBKDF2_HMAC.7, crypto_generichashl.2, crypto_generichash_init.4,
         PKCS5_pbkdf2_set.3, wc_PBKDF2.7, wc_PBKDF1.7, wc_PKCS12_PBKDF.7, wc_PKCS12_PBKDF_ex.7, wc_HKDF.9, crypto_pwhash.2
KEYSIZE = bytes
# add weak key size < 112 bits, legacy 80 <= key < 112
SAFE_KEY_SIZE = 112

[EVP_BytesToKey]
rule = EVP_BytesToKey; int EVP_BytesToKey(const EVP_CIPHER *type, const EVP_MD *md,const unsigned char *salt, const unsigned char *data, int datal, int count, unsigned char *key,unsigned char *iv);8; 9; 1:CTYPE:9; 2:CTYPE:9; 3:bytes=8:92; 4:bytes:91; 5:int:0; 6:int:93; 7:output:9; 8:output:9; 5<4

[EVP_BytesToKey.6]
SAMEAS = PKCS5_PBKDF2_HMAC.5, PKCS5_PBKDF2_HMAC_SHA1.5, gcry_kdf_derive.7, pbkdf2_sha1.4, pbkdf2_sha1.4, bcrypt_pbkdf.7, pkcs12_kdf.6, krb5int_pbkdf2.5
SAFE_ITERATION = 1000


# -------------------------------------------------- #
# ----------- PRNG --------------------------------- #
# -------------------------------------------------- #
[srand]
rule = srand; void srand (unsigned int seed);1; 6; 1:CTX:62

[srand.1]
SAMEAS = srandom.1, srand48.1
# seeding with predictable seed
UNSECURE_FUNCTIONS = time, getpid, gettimeofday, currentTimeMillis, System.currentTimeMillis


[Cryptographic-Groups]
# General
# FunctionName = Library1;Library2;, Cryptographic Algorithm type, keysize (bits), Mode of Operation, encrypt = 1/decrypt = 0, IV size (bits), sign = 0/verify = 1, Padding or none
# empty or none for none

# ---- DES ---- #
DES = DEFINES, DES, ,
DES-CBC = OpenSSL, DES, 56, CBC, none, 64,
# DES in CBC, ECB, CFB and OFB modes respectively.
EVP_des_cbc = OpenSSL, DES, 56, CBC, none, 64,
EVP_des_cfb = OpenSSL, DES, 56, CFB, none, 64,
EVP_des_ofb = OpenSSL, DES, 56, OFB, none, 64,
EVP_des_ecb = OpenSSL, DES, 56, ECB, none, 64,
DES_cfb_encrypt = OpenSSL, DES, 56, CFB, none, 64,
DES_ofb_encrypt = OpenSSL, DES, 56, OFB, none, 64,
DES_pcbc_encrypt = OpenSSL, DES, 56, CBC, none, 64,
DES_cfb64_encrypt = OpenSSL, DES, 56, CFB64, none, 64,
DES_ofb64_encrypt = OpenSSL, DES, 56, OFB64, none, 64,
DES_cbc_encrypt = OpenSSL, DES, 56, CBC, none, 64,
des_cbc_encrypt = LibTomCrypt, DES, 56, CBC, none, 64,
DES_ncbc_encrypt = OpenSSL, DES, 56, CBC, none, 64,
des_ncbc_encrypt = LibTomCrypt, DES, 56, CBC, none, 64,
DES_ecb_encrypt = OpenSSL, DES, 56, ECB, none, 64,
DES_encrypt1 = OpenSSL, DES, 56, none, none, 64,
DES_encrypt2 = OpenSSL, DES, 56, none, none, 64,
DES_encrypt3 = OpenSSL, DES, 56, none, 0, 64,
DES_decrypt3 = OpenSSL, DES, 56, none, 1, 64,
DES_string_to_key = OpenSSL, DES, 56, none, none, 64,
wc_Des_SetKey = WolfSSL, DES, 56, none, none, 64,
wc_Des_SetIV = WolfSSL, DES, 56, none, none, 64,
wc_Des_EcbEncrypt = WolfSSL, DES, 56, ECB, none, none,
wc_Des_CbcDecryptWithKey = WolfSSL, DES, 56, CBC, 0, 64,
wc_Des_CbcEncryptWithKey = WolfSSL, DES, 56, CBC, 1, 64,
des_setup = LibTomCrypt, DES, 56, , none, 64,
des_ecb_encrypt = LibTomCrypt, DES, 56, ECB, 1, none,
des_ecb_decrypt = LibTomCrypt, DES, 56, ECB, 0, none,
deskey = LibTomCrypt, DES, 56, none, none, 64,
mbedtls_des_setkey_enc = mbedTLS, DES, 56, none, none, 64,
mbedtls_des_setkey_dec = mbedTLS, DES, 56, none, none, 64,
mbedtls_des_crypt_ecb = mbedTLS, DES, 56, ECB, none, none,
mbedtls_des_crypt_cbc = mbedTLS, DES, 56, CBC, none, 64,


# Two key triple DES in CBC, ECB, CFB and OFB modes respectively.
EVP_des_ede_cbc = OpenSSL, TDES2, 112, CBC, none, 64,
EVP_des_ede_ofb = OpenSSL, TDES2, 112, OFB, none, 64,
EVP_des_ede_cfb = OpenSSL, TDES2, 112, CFB, none, 64,
EVP_des_ede = OpenSSL, TDES2, 112, none, none, 64,
EVP_des_ede_ecb = OpenSSL, TDES2, 112, ECB, none, 64,
DES_ede2_cbc_encrypt = OpenSSL, TDES2, 112, CBC, none, 64,
DES_ede2_cfb64_encrypt = OpenSSL, TDES2, 112, CFB64, none, 64,
DES_ede2_ofb64_encrypt = OpenSSL, TDES2, 112, OFB64, none, 64,
DES_ecb2_encrypt = OpenSSL, TDES2, 112, ECB, none, none,
DES_string_to_2keys = OpenSSL, TDES2, 112, , none, 64,
mbedtls_des3_set2key_enc = mbedTLS, TDES2, 112, none, 1, 64,
mbedtls_des3_set2key_dec = mbedTLS, TDES2, 112, none, 0, 64,

# Variant of DES-X using two keys
EVP_desx_cbc = OpenSSL, TDES2, 112, CBC, none, 64,
DES_xcbc_encrypt = OpenSSL, TDES2, 112, CBC, none, 64,

# Three key triple DES in CBC, ECB, CFB and OFB modes respectively.
EVP_des_ede3_cbc = OpenSSL, TDES3, 168, CBC, none, 64,
des-ede3-cbc = OpenSSL, TDES3, 168, CBC, none, 64,
EVP_des_ede3_ofb = OpenSSL, TDES3, 168, OFB, none, 64,
EVP_des_ede3_cfb = OpenSSL, TDES3, 168, CFB, none, 64,
EVP_des_ede3_ecb = OpenSSL, TDES3, 168, ECB, none, 64,
EVP_des_ede3 = OpenSSL, TDES3, 168, none, none, 64,
DES_ede3_cbc_encrypt = OpenSSL, TDES3, 168, CBC, none, 64,
des_ede3_cbc_encrypt = LibTomCrypt, TDES3, 168, CBC, none, 64,
DES_ede3_cfb64_encrypt = OpenSSL, TDES3, 168, CFB64, none, 64,
DES_ede3_ofb64_encrypt = OpenSSL, TDES3, 168, OFB64, none, 64,
DES_ecb3_encrypt = OpenSSL, TDES3, 168, none, none, 64,
wc_Des3_EcbEncrypt = WolfSSL, TDES3, 168, none, none, 64,
wc_Des3_SetKey = WolfSSL, TDES3, 168, none, none, 64,
wc_Des3_SetIV = WolfSSL, TDES3, 168, none, none, 64,
wc_Des3_CbcEncryptWithKey = WolfSSL, TDES3, 168, CBC, 1, 64,
wc_Des3_CbcDecryptWithKey = WolfSSL, TDES3, 168, CBC, 0, 64,
des3_setup = LibTomCrypt, TDES3, 168, none, none, 64,
des3_ecb_encrypt = LibTomCrypt, TDES3, 168, none, 1, none,
des3_ecb_decrypt = LibTomCrypt, TDES3, 168, none, 0, none,
mbedtls_des3_set3key_enc = mbedTLS, TDES3, 168, none, 1, 64,
mbedtls_des3_set3key_dec = mbedTLS, TDES3, 168, none, 0, 64,
mbedtls_des3_crypt_ecb = mbedTLS, TDES3, 168, ECB, none, 64,
mbedtls_des3_crypt_cbc = mbedTLS, TDES3, 168, CBC, none, none,


EVP_des_cfb1 = OpenSSL, DES, 56, CFB1, none, 64,
EVP_des_cfb64 = OpenSSL, DES, 56, CFB64, none, 64,
EVP_des_cfb8 = OpenSSL, DES, 56, CFB8, none, 64,
EVP_des_ede3_cfb1 = OpenSSL, TDES3, 168, CFB1, none, 64,
EVP_des_ede3_cfb64 = OpenSSL, TDES3, 168, CFB64, none, 64,
EVP_des_ede3_cfb8 = OpenSSL, TDES3, 168, CFB8, none, 64,
EVP_des_ede_cfb64 = OpenSSL, TDES2, 112, CFB64, none, 64,
EVP_des_ede3_wrap = OpenSSL, TDES3, 168, WRAP, none, 64,
mbedtls_des_setkey = mbedTLS, DES, 56, none, none, 64,

# ---- AES ---- #
AES = DEFINES, AES,
AES_set_encrypt_key = OpenSSL, AES, none, none, 1, 128,
AES_set_decrypt_key = OpenSSL, AES, none, none, 0, 128,
AES_ecb_encrypt = OpenSSL, AES, none, ECB, none, 128,
AES_cbc_encrypt = OpenSSL, AES, none, CBC, none, 128,
AES_cfb128_encrypt = OpenSSL, AES, 128, CFB128, none, 128,
AES_cfb1_encrypt = OpenSSL, AES, none, CFB1, none, 128,
AES_cfb8_encrypt = OpenSSL, AES, none, CFB8, none, 128,
AES_ofb128_encrypt = OpenSSL, AES, 128, OFB128, none, 128,
AES_wrap_key = OpenSSL, AES,
AES_unwrap_key = OpenSSL, AES,
AES_ctr128_encrypt = OpenSSL, AES, 128, CTR, none, 128,
aes128 = DEFINES, AES, 128, none, none, 128,
aes192 = DEFINES, AES, 192, none, none, 128,
aes256 = DEFINES, AES, 256, none, none, 128,


EVP_aes_128_cbc = OpenSSL, AES, 128, CBC, none, 128,
EVP_aes_192_cbc = OpenSSL, AES, 192, CBC, none, 128,
EVP_aes_256_cbc = OpenSSL, AES, 256, CBC, none, 128,
EVP_aes_128_cfb = OpenSSL, AES, 128, CFB, none, 128,
EVP_aes_192_cfb = OpenSSL, AES, 192, CFB, none, 128,
EVP_aes_256_cfb = OpenSSL, AES, 256, CFB, none, 128,
EVP_aes_128_ofb = OpenSSL, AES, 128, OFB, none, 128,
EVP_aes_192_ofb = OpenSSL, AES, 192, OFB, none, 128,
EVP_aes_256_ofb = OpenSSL, AES, 256, OFB, none, 128,
EVP_aes_128_ecb = OpenSSL, AES, 128, ECB, none, 128,
EVP_aes_192_ecb = OpenSSL, AES, 192, ECB, none, 128,
EVP_aes_256_ecb = OpenSSL, AES, 256, ECB, none, 128,

AES_encrypt = OpenSSL, AES, none, none, 1, 128,
AES_decrypt = OpenSSL, AES, none, none, 0, 128,

wc_AesSetKey = WolfSSL, AES, none, none, none, 128,
wc_AesSetIV = WolfSSL, AES, none, none, none, 128,
wc_AesEncryptDirect = WolfSSL, AES, none, none, 1, 128,
wc_AesDecryptDirect = WolfSSL, AES, none, none, 0, 128,
wc_AesSetKeyDirect = WolfSSL, AES, none, none, none, 128,
wc_AesCbcEncrypt = WolfSSL, AES, none, CBC, 1, 128,
wc_AesCbcDecrypt = WolfSSL, AES, none, CBC, 0, 128,

EVP_aes_128_ctr = OpenSSL, AES, 128, CTR, none, 128,
EVP_aes_192_ctr = OpenSSL, AES, 192, CTR, none, 128,
EVP_aes_256_ctr = OpenSSL, AES, 256, CTR, none, 128,

AES-128-CTR = DEFINES, AES, 128, CTR, none, 128,
AES-192-CTR = DEFINES, AES, 192, CTR, none, 128,
AES-256-CTR = DEFINES, AES, 256, CTR, none, 128,

AES-128-CBC = DEFINES, AES, 128, CBC, none, 128,
AES-192-CBC = DEFINES, AES, 192, CBC, none, 128,
AES-256-CBC = DEFINES, AES, 256, CBC, none, 128,

EVP_aes_128_cfb1 = OpenSSL, AES, 128, CFB1, none, 128,
EVP_aes_128_cfb128 = OpenSSL, AES, 128, CFB128, none, 128,
EVP_aes_128_cfb8 = OpenSSL, AES, 128, CFB8, none, 128,
EVP_aes_192_cfb1 = OpenSSL, AES, 192, CFB1, none, 128,
EVP_aes_192_cfb128 = OpenSSL, AES, 192, CFB128, none, 128,
EVP_aes_192_cfb8 = OpenSSL, AES, 192, CFB8, none, 128,
EVP_aes_256_cfb1 = OpenSSL, AES, 256, CFB1, none, 128,
EVP_aes_256_cfb128 = OpenSSL, AES, 256, CFB128, none, 128,
EVP_aes_256_cfb8 = OpenSSL, AES, 256, CFB, none, 128,

rijndael_setup = LibTomCrypt, AES, none, none, none, 128,
rijndael_ecb_encrypt = LibTomCrypt, AES, none, ECB, 1, 128,
rijndael_ecb_decrypt = LibTomCrypt, AES, none, ECB, 0, 128,
rijndael_enc_setup = LibTomCrypt, AES, none, none, none, 128,
rijndael_enc_ecb_encrypt = LibTomCrypt, AES, none, ECB, 1, 128,

mbedtls_aes_setkey_enc = mbedTLS, AES, none, none, 1, 128,
mbedtls_aes_setkey_dec = mbedTLS, AES, none, none, 0, 128,
mbedtls_aes_xts_setkey_enc = mbedTLS, AES, none, XTS, 1, 128,
mbedtls_aes_xts_setkey_dec = mbedTLS, AES, none, XTS, 0, 128,
mbedtls_aes_crypt_ecb = mbedTLS, AES, none, ECB, none, none,
mbedtls_aes_crypt_cbc = mbedTLS, AES, none, CBC, none, 128,
mbedtls_aes_crypt_xts = mbedTLS, AES, none, XTS, none, none,
mbedtls_aes_crypt_cfb128 = mbedTLS, AES, none, CFB128, none, 128,
mbedtls_aes_crypt_cfb8 = mbedTLS, AES, none, CFB8, none, 128,
mbedtls_aes_crypt_ofb = mbedTLS, AES, none, OFB, none, 128,
mbedtls_aes_crypt_ctr = mbedTLS, AES, none, CTR, none, 128,

mbedtls_internal_aes_encrypt = mbedTLS, AES, none, none, 1, 128,
mbedtls_internal_aes_decrypt = mbedTLS, AES, none, none, 1, 128,
mbedtls_aes_encrypt = mbedTLS, AES, none, none, 1, 128,
mbedtls_aes_decrypt=  mbedTLS, AES, none, none, 1, 128,

EVP_aes_128_wrap = OpenSSL, AES, 128, WRAP, none, 128,
EVP_aes_192_wrap = OpenSSL, AES, 192, WRAP, none, 128,
EVP_aes_256_wrap = OpenSSL, AES, 256, WRAP, none, 128,
EVP_aes_128_xts = OpenSSL, AES, 256, XTS, none, none,
EVP_aes_256_xts = OpenSSL, AES, 512, XTS, none, none,

# ---- BLOWFISH ---- #
BLOWFISH = DEFINES, BLOWFISH, none, none, none, 64,

BF_set_key = OpenSSL, BLOWFISH, none, none, none, 64,
BF_ecb_encrypt = OpenSSL, BLOWFISH, none, ECB, none, 64,
BF_cbc_encrypt = OpenSSL, BLOWFISH, none, CBC, none, 64,
BF_cfb64_encrypt = OpenSSL, BLOWFISH, none, CFB64, none, 64,
BF_ofb64_encrypt = OpenSSL, BLOWFISH, none, OFB64, none, 64,
BF_encrypt = OpenSSL, BLOWFISH, none, none, 1, 64,
BF_decrypt = OpenSSL, BLOWFISH, none, none, 0, 64,
EVP_bf_ecb = OpenSSL, BLOWFISH, none, ECB, none, 64,

EVP_bf_cbc = OpenSSL, BLOWFISH, none, CBC, none, 64,
EVP_bf_cfb = OpenSSL, BLOWFISH, none, CFB,none, 64,
EVP_bf_ofb = OpenSSL, BLOWFISH, none, OFB, none, 64,
EVP_bf_cfb64 = OpenSSL, BLOWFISH, none, CFB64, none, 64,

blowfish_setup = LibTomCrypt, BLOWFISH, none, none, none, 64,
blowfish_ecb_encrypt = LibTomCrypt, BLOWFISH, none, ECB, 1, 64,
blowfish_ecb_decrypt = LibTomCrypt, BLOWFISH, none, ECB, 0, 64,

mbedtls_blowfish_setkey = mbedTLS, BLOWFISH, none, none, none, 64,
mbedtls_blowfish_crypt_ecb = mbedTLS, BLOWFISH, none, ECB, none, 64,
mbedtls_blowfish_crypt_cbc = mbedTLS, BLOWFISH, none, CBC, none, 64,
mbedtls_blowfish_crypt_cfb64 = mbedTLS, BLOWFISH, none, CFB64, none, 64,
mbedtls_blowfish_crypt_ctr = mbedTLS, BLOWFISH, none, CTR, none, 64,

# ---- CAMELLIA ---- #
CAMELLIA = DEFINES, CAMELLIA, none, none, none, 128,

Camellia_set_key = OpenSSL, CAMELLIA, none, none, none, 128,
Camellia_ecb_encrypt = OpenSSL, CAMELLIA, none, none, none, 128,
Camellia_cbc_encrypt = OpenSSL, CAMELLIA, none, none, none, 128,
Camellia_cfb128_encrypt = OpenSSL, CAMELLIA, none, CFB128, none, 128,
Camellia_cfb1_encrypt = OpenSSL, CAMELLIA, none, CFB1, none, 128,
Camellia_cfb8_encrypt = OpenSSL, CAMELLIA, none, CFB8, none, 128,
Camellia_ofb128_encrypt = OpenSSL, CAMELLIA, none, OFB128, none, 128,
Camellia_encrypt = OpenSSL, CAMELLIA, none, none, 1, 128,
Camellia_decrypt = OpenSSL, CAMELLIA, none, none, 0, 128,
EVP_camellia_128_ecb = OpenSSL, CAMELLIA, 128, ECB, none, 128,
EVP_camellia_192_ecb = OpenSSL, CAMELLIA, 192, ECB , none, 128,
EVP_camellia_256_ecb = OpenSSL, CAMELLIA, 256, ECB, none, 128,

wc_CamelliaSetKey = WolfSSL, CAMELLIA, none, none, none, 128,
wc_CamelliaSetIV = WolfSSL, CAMELLIA, none, none, none, 128,
wc_CamelliaEncryptDirect = WolfSSL, CAMELLIA, none, none, 1, 128,
wc_CamelliaDecryptDirect = WolfSSL, CAMELLIA, none, none, 0, 128,
wc_CamelliaCbcEncrypt = WolfSSL, CAMELLIA, none, CBC, 1, 128,
wc_CamelliaCbcDecrypt = WolfSSL, CAMELLIA, none, CBC, 0, 128,
EVP_camellia_128_cbc = OpenSSL, CAMELLIA, 128, CBC, none, 128,
EVP_camellia_192_cbc = OpenSSL, CAMELLIA, 192, CBC, none, 128,
EVP_camellia_256_cbc = OpenSSL, CAMELLIA, 256, CBC, none, 128,

mbedtls_camellia_setkey_enc = mbedTLS, CAMELLIA, none, none, 1, 128,
mbedtls_camellia_setkey_dec = mbedTLS, CAMELLIA, none, none, 0, 128,
mbedtls_camellia_crypt_ecb = mbedTLS, CAMELLIA, none, ECB, none, 128,
mbedtls_camellia_crypt_cfb128 = mbedTLS, CAMELLIA, none, CFB128, none, 128,
mbedtls_camellia_crypt_ctr = mbedTLS, CAMELLIA, none, CTR, none, 128,
mbedtls_camellia_crypt_cbc = mbedTLS, CAMELLIA, none, CBC, none, 128,


camellia256 = DEFINES, CAMELLIA, 256, none, none, 128,
camellia192 = DEFINES, CAMELLIA, 192, none, none, 128,
camellia128 = DEFINES, CAMELLIA, 128, none, none, 128,

camellia-128-cbc = DEFINES, CAMELLIA, 128, CBC, none, 128,
camellia-192-cbc = DEFINES, CAMELLIA, 192, CBC, none, 128,
camellia-256-cbc = DEFINES, CAMELLIA, 256, CBC, none, 128,

EVP_camellia_128_cfb1 = OpenSSL, CAMELLIA, 128, CFB1, none, 128,
EVP_camellia_128_cfb128 = OpenSSL, CAMELLIA, 128, CFB128, none, 128,
EVP_camellia_128_cfb8 = OpenSSL, CAMELLIA, 128, CFB8, none, 128,
EVP_camellia_128_ofb = OpenSSL, CAMELLIA, 128, OFB, none, 128,
EVP_camellia_192_cfb1 = OpenSSL, CAMELLIA, 192, CFB1, none, 128,
EVP_camellia_192_cfb128 = OpenSSL, CAMELLIA, 192, CFB128, none, 128,
EVP_camellia_192_cfb8 = OpenSSL, CAMELLIA, 192, CFB8, none, 128,
EVP_camellia_192_ofb = OpenSSL, CAMELLIA, 192, OFB, none, 128,
EVP_camellia_256_cfb1 = OpenSSL, CAMELLIA, 256, CFB1, none, 128,
EVP_camellia_256_cfb128 = OpenSSL, CAMELLIA, 256, CFB128, none, 128,
EVP_camellia_256_cfb8 = OpenSSL, CAMELLIA, 256, CFB8, none, 128,
EVP_camellia_256_ofb = OpenSSL, CAMELLIA, 256, OFB, none, 128,

# ---- CAST ---- #
CAST = DEFINES, CAST, none, none, none, 64,

CAST_ecb_encrypt = OpenSSL, CAST, none,ECB , none, 64,
CAST_encrypt = OpenSSL, CAST, none, none, 1, 64,
CAST_decrypt = OpenSSL, CAST,none , none, 0, 64,
CAST_set_key = OpenSSL, CAST, none, none, none, 64,
CAST_cbc_encrypt = OpenSSL, CAST, none, CBC, none, 64,
CAST_cfb64_encrypt = OpenSSL, CAST, none, CFB64, none, 64,
CAST_ofb64_encrypt = OpenSSL, CAST, none, OFB64, none, 64,

# ---- CAST5 ---- #
CAST5 = DEFINES, CAST5, none, none, none, 64,

EVP_cast5_ecb = OpenSSL, CAST5, 128, ECB, none, 64,
EVP_cast5_cbc = OpenSSL, CAST5, 128, CBC, none, 64,
EVP_cast5_cfb = OpenSSL, CAST5, 128, CFB, none, 64,
EVP_cast5_cfb64 = OpenSSL, CAST5, 128, CFB64, none, 64,
EVP_cast5_ofb = OpenSSL, CAST5, 128, OFB, none, 64,


# ---- RC2 ---- #
RC2 = DEFINES, RC2, none, none, none, 64,
RC2-CBC = = DEFINES, RC2, none, CBC, none, 64,
RC2_set_key = OpenSSL, RC2, none, none, none, 64,
RC2_ecb_encrypt = OpenSSL, RC2, none, none, none, 64,
RC2_encrypt = OpenSSL, RC2, none, none, 1, 64,
RC2_decrypt = OpenSSL, RC2, none, none, 0, 64,
RC2_cbc_encrypt = OpenSSL, RC2, none, CBC, none, 64,
RC2_cfb64_encrypt = OpenSSL, RC2, none, CFB64, none, 64,
RC2_ofb64_encrypt = OpenSSL, RC2, none, OFB64, none, 64,

EVP_rc2_cbc = OpenSSL, RC2, none, CBC, none, 64,
EVP_rc2_ecb = OpenSSL, RC2, none, ECB, none, none,
EVP_rc2_cfb = OpenSSL, RC2, none, CFB, none, 64,
EVP_rc2_ofb = OpenSSL, RC2, none, OFB, none, 64,
EVP_rc2_40_cbc = OpenSSL, RC2, 40, CBC, none, 64,
EVP_rc2_64_cbc = OpenSSL, RC2, 64, CBC, none, 64,
EVP_rc2_cfb64 = OpenSSL, RC2, 64, CFB64, none, 64,

# ---- RC4 ---- #
RC4 = DEFINES, RC4, none, none, none, none,
EVP_rc4 = OpenSSL, RC4, none, none, none, none,
EVP_rc4_40 = OpenSSL, RC4, 40, none, none, none,
RC4_set_key = OpenSSL, RC4, none, none, none, none,
rc4_init_key = OpenSSL, RC4, none, none, none, none,

mbedtls_arc4_setup = mbedTLS, RC4, none, none, none, none,
mbedtls_arc4_crypt = mbedTLS, RC4, none, none, none, none,

# ---- IDEA ---- #
IDEA = DEFINES, IDEA, 128, none, none, 64,
EVP_idea_cbc = OpenSSL, IDEA, 128, CBC, none, 64,
IDEA-CBC = DEFINES, IDEA, 128, CBC, none, 64,
EVP_idea_ecb = OpenSSL, IDEA, 128, ECB, none, 64,
EVP_idea_cfb = OpenSSL, IDEA, 128, CFB, none, 64,
EVP_idea_ofb = OpenSSL, IDEA, 128, OFB, none, 64,
EVP_idea_cfb64 = OpenSSL, IDEA, 128, CFB64, none, 64,

# ---- RC5 ---- #
RC5 = DEFINES, RC5, none, none, none, none,
EVP_rc5_32_12_16_cbc = OpenSSL, RC5, none, CBC, none, none,
EVP_rc5_32_12_16_ecb = OpenSSL, RC5, none, ECB, none, none,
EVP_rc5_32_12_16_cfb = OpenSSL, RC5, none, CFB, none, none,
EVP_rc5_32_12_16_ofb = OpenSSL, RC5, none, OFB, none, none,


# ---- CHACHA20 ---- #
CHACHA20 = DEFINES, CHACHA20, none, none, none, none,
CRYPTO_chacha_20 = OpenSSL, CHACHA20, none, none, none, none,
EVP_chacha20 = OpenSSL, CHACHA20, none, none, none, none,


# ---- TWOFISH ---- #
TOWFISH = DEFINES, TWOFISH, none, none, none, 128,
twofish_setup = LibTomCrypt, TWOFISH, none, none, none, 128,
twofish_ecb_encrypt = LibTomCrypt, TWOFISH, none, ECB, 1, 128,
twofish_ecb_decrypt = LibTomCrypt, TWOFISH, none, ECB, 0, 128,


# ---- SERPENT ---- #
SERPENT = DEFINES, SERPENT, none, none, none, 128,
serpent_setup = LibTomCrypt, SERPENT, none, none, none, 128,
serpent_ecb_encrypt = LibTomCrypt, SERPENT, none, ECB, 1, none,
serpent_ecb_decrypt = LibTomCrypt, SERPENT, none, ECB, 0, none,

# ----- SEED ----- #
SEED = DEFINES, SEED, 128, none, none, 128,
SEED-CBC = DEFINES, SEED, 128, CBC, none, none,128
EVP_seed_cbc = OpenSSL, SEED, 128, CBC, none, none,128
EVP_seed_cfb = OpenSSL, SEED, 128, CFB, none, none,128
EVP_seed_cfb128 = OpenSSL, SEED, 128, CFB128, none, none,128
EVP_seed_ecb = OpenSSL, SEED, 128, ECB, none, none,128
EVP_seed_ofb = OpenSSL, SEED, 128, OFB, none, none,128

# ---- General ---- #
EVP_DecryptInit = OpenSSL, none, none, none, 0, none,
EVP_EncryptInit = OpenSSL, none, none, none, 1, none,
EVP_DecryptInit_ex = OpenSSL, none, none, none, 0, none,
EVP_EncryptInit_ex = OpenSSL, none, none, none, 1, none,
EVP_EncryptUpdate = OpenSSL, none, none, none, 1, none,
EVP_DecryptUpdate = OpenSSL, none, none, none, 0, none,


gcry_cipher_open = LIBGCRYPT, none, none, none, none, none,
gcry_cipher_setiv = LIBGCRYPT, none, none, none, none, none,
gcry_cipher_setctr = LIBGCRYPT, none, none, none, none, none,
gcry_cipher_setkey = LIBGCRYPT, none, none, none, none, none,
gcry_cipher_encrypt = LIBGCRYPT, none, none, none, 1, none,
gcry_cipher_decrypt = LIBGCRYPT, none, none, none, 0, none,
gcry_cipher_ctl = LIBGCRYPT, none, none, none, none, none,
CRYPTO_cfb128_1_encrypt = OpenSSL, none, none, CFB1, none, 128,
CRYPTO_cfb128_8_encrypt = OpenSSL, none, none, CFB8, none, 128,
CRYPTO_cfb128_encrypt = OpenSSL, none, none, CFB, none, 128,
EVP_CipherInit = OpenSSL, none, none, none, none, none,
EVP_CipherInit_ex = OpenSSL, none, none, none, none, none,
WolfSSL_EVP_CipherInit = WolfSSL, none, none, none, none, none,

EVP_DecryptFinal = OpenSSL, none, none, none, none, none,
EVP_DecryptFinal_ex = OpenSSL, none, none, none, none, none,
EVP_EncryptFinal = OpenSSL, none, none, none, none, none,
EVP_EncryptFinal_ex = OpenSSL, none, none, none, none, none,
EVP_CIPHER_CTX_set_padding = OpenSSL, none, none, none, none, none,
mbedtls_cipher_setup = mbedTLS, none, none, none, none, none,

EVP_CipherUpdate = OpenSSL, none, none, none, none, none,
EVP_CIPHER_CTX_ctrl = OpenSSL, none, none, none, none, none,
EVP_get_cipherbyname = OpenSSL, none, none, none, none, none,
EVP_CIPHER_CTX_set_key_length = OpenSSL, none, none, none, none, none,
BIO_set_cipher = OpenSSL, none, none, none, none, none,
CipherSetKey = CRYPTOPP, none, none, none, none, none,
ecb_start = LibTomCrypt, none, none, ECB, none, none,
ecb_encrypt = LibTomCrypt, none, none, ECB, 1, none,
ecb_decrypt = LibTomCrypt, none, none, ECB, 0, none,
cfb_start = LibTomCrypt, none, none, CFB, none, none,
cfb_encrypt = LibTomCrypt, none, none, CFB, 1, none,
cfb_decrypt = LibTomCrypt, none, none, CFB, 0, none,
cfb_setiv = LibTomCrypt, none, none, CFB, none, none,
ofb_start = LibTomCrypt, none, none, OFB, none, none,
ofb_encrypt = LibTomCrypt, none, none, OFB, 1, none,
ofb_decrypt = LibTomCrypt, none, none, OFB, 0, none,
ofb_setiv = LibTomCrypt, none, none, OFB, none, none,
cbc_start = LibTomCrypt, none, none, CBC, none, none,
cbc_encrypt = LibTomCrypt, none, none, CBC, 1, none,
cbc_decrypt = LibTomCrypt, none, none, CBC, 0, none,
cbc_setiv = LibTomCrypt, none, none, CBC, none, none,
ctr_start = LibTomCrypt, none, none, CTR, none, none,
ctr_encrypt = LibTomCrypt, none, none, CTR, 1, none,
ctr_decrypt = LibTomCrypt, none, none, CTR, 0, none,
ctr_setiv = LibTomCrypt, none, none, CTR, none, none,
setkey = LIBC, DES, none, none, none, none,
setkey_r = LIBC, DES, none, none, none, none,
encrypt_r = LIBC, DES, none, ECB, none, none,
encrypt = LIBC, DES, none, ECB, none, none,
ecb_crypt = LIBC, DES, none, ECB, none, none,
cbc_crypt = LIBC, DES, none, CBC, none, none,
gcry_cipher_algo_name = LIBGCRYPT, none, none, none, none, none,
mbedtls_cipher_setkey = mbedTLS, none, none, none, none, none,
mbedtls_cipher_set_iv = mbedTLS, none, none, none, none, none,
mbedtls_cipher_crypt = mbedTLS, none, none, none, none, none,

mbedtls_cipher_update = mbedTLS, none, none, none, none, none,
mbedtls_cipher_info_from_string = mbedTLS, none, none, none, none, none,
mbedtls_cipher_info_from_type = mbedTLS, none, none, none, none, none,
mbedtls_cipher_info_from_values = mbedTLS, none, none, none, none, none,
mbedtls_cipher_set_padding_mode = mbedTLS, none, none, none, none, none,

find_cipher = LibTomCrypt, none

# ---- PRFS ---- #
rand = LIBC, CRAND
srand = LIBC, CRAND
srand48 = LIBC, CRAND
rand_r = LIBC, CRAND
mrand48 = LIBC, CRAND
lrand48 = LIBC, CRAND
drand48 = LIBC, CRAND
random = LIBC, CRAND
drand48_r = LIBC, CRAND
seed48 = LIBC, CRAND
srandom = LIBC, CRAND
arc4random = LIBC, CRAND
arc4random_buf = LIBC, CRAND
arc4random_uniform = LIBC, CRAND
RAND_seed = OpenSSL, OPENSSL_RANDOM
RAND_add = OpenSSL, OPENSSL_RANDOM
RAND_bytes = OpenSSL, OPENSSL_RANDOM
RAND_pseudo_bytes = OpenSSL, OPENSSL_RANDOM
gcry_randomize = LIBGCRYPT, GNUPG_RANDOM
gcry_random_bytes = LIBGCRYPT, GNUPG_RANDOM
wolfSSL_RAND_seed = WolfSSL, WOLFSSL_RANDOM
RAND_load_file = OpenSSL, OPENSSL_RANDOM

# ---- MD2 ---- #
MD2 = DEFINES;OpenSSL, MD2
MD2_Update = OpenSSL, MD2
MD2_Final = OpenSSL, MD2
EVP_md2 = OpenSSL, MD2
MD2_Init = OpenSSL, MD2

# ---- MD4 ---- #
MD4 = DEFINES;OpenSSL, MD4
MD4_Init = OpenSSL, MD4
MD4_Update = OpenSSL, MD4
MD4_Final = OpenSSL, MD4
EVP_md4 = OpenSSL, MD4
MD4Update = WolfSSL, MD4
MD4Final = WolfSSL, MD4
MD4Init = WolfSSL, MD4
md4_init = LibTomCrypt, MD4

# ---- MD5 ---- #
MD5 = DEFINES;OpenSSL, MD5
MD5_Init = OpenSSL, MD5
MD5_Update = OpenSSL, MD5
MD5_Final = OpenSSL, MD5
EVP_md5 = OpenSSL, MD5

wc_Md5Hash = WolfSSL, MD5
wc_InitMd5 = WolfSSL, MD5
wc_Md5Update = WolfSSL, MD5
wc_Md5Final = WolfSSL, MD5
wc_Md5GetHash = WolfSSL, MD5
MD5Update = WolfSSL, MD5
MD5Final = WolfSSL, MD5
MD5Init = WolfSSL, MD5
md5_init = LibTomCrypt, MD5
mbedtls_md5_init = mbedTLS, MD5
mbedtls_md5 = mbedTLS, MD5

mbedtls_md5_update = mbedTLS, MD5
mbedtls_md5_finish = mbedTLS, MD5
CyaSSL_MD5_Init = WolfSSL, MD5
WolfSSL_MD5_Init = WolfSSL, MD5
CyaSSL_MD5_Update = WolfSSL, MD5
WolfSSL_MD5_Update = WolfSSL, MD5
CyaSSL_MD5_Final = WolfSSL, MD5
WolfSSL_MD5_Final = WolfSSL, MD5
CyaSSL_EVP_md5 = WolfSSL, MD5
WolfSSL_EVP_md5 = WolfSSL, MD5

# ---- SHA ---- #
SHA = DEFINES;OpenSSL, SHA
SHA_Init = OpenSSL, SHA
SHA_Update = OpenSSL, SHA
SHA_Final = OpenSSL, SHA
EVP_sha = OpenSSL, SHA
EVP_dss = OpenSSL, SHA
CyaSSL_SHA_Init = WolfSSL, SHA
CyaSSL_SHA_Update = WolfSSL, SHA
CyaSSL_SHA_Final = WolfSSL, SHA

# ---- SHA1 ---- #
SHA1 = DEFINES;OpenSSL, SHA1
SHA1_Init = OpenSSL, SHA1
SHA1_Update = OpenSSL, SHA1
SHA1_Final = OpenSSL, SHA1
EVP_sha1 = OpenSSL, SHA1
wc_ShaHash = WolfSSL, SHA1
wc_InitSha = WolfSSL, SHA1
wc_ShaUpdate = WolfSSL, SHA1
wc_ShaFinal = WolfSSL, SHA1
wc_ShaGetHash = WolfSSL, SHA1
SHA1Update = WolfSSL, SHA1
SHA1Final = WolfSSL, SHA1
SHA1Init = WolfSSL, SHA1
sha1_init = LibTomCrypt, SHA1
mbedtls_sha1_init = mbedTLS, SHA1
mbedtls_sha1 = mbedTLS, SHA1
EVP_dss1 = OpenSSL, SHA1

mbedtls_sha1_update = mbedTLS, SHA1
mbedtls_sha1_finish = mbedTLS, SHA1
mbedtls_sha1_starts = mbedTLS, SHA1

CyaSSL_EVP_sha1 = WolfSSL, SHA1

# ---- SHA224 ---- #
SHA224 = DEFINES;OpenSSL, SHA224
SHA224_Init = OpenSSL, SHA224
SHA224_Update = OpenSSL, SHA224
SHA224_Final = OpenSSL, SHA224
EVP_sha224 = OpenSSL, SHA224
wc_Sha224Hash = WolfSSL, SHA224
wc_InitSha224 = WolfSSL, SHA224
wc_Sha224Update = WolfSSL, SHA224
wc_Sha224Final = WolfSSL, SHA224


# ---- SHA256 ---- #
SHA256 = DEFINES;OpenSSL, SHA256
SHA256_Init = OpenSSL, SHA256
SHA256_Update = OpenSSL, SHA256
SHA256_Final = OpenSSL, SHA256
EVP_sha256 = OpenSSL, SHA256
wc_Sha256Hash = WolfSSL, SHA256
wc_InitSha256 = WolfSSL, SHA256
wc_Sha256Update = WolfSSL, SHA256
wc_Sha256Final = WolfSSL, SHA256
wc_Sha256GetHash = WolfSSL, SHA256
SHA256Update = WolfSSL, SHA256
SHA256Final = WolfSSL, SHA256
SHA256Init = WolfSSL, SHA256
sha256_init = LibTomCrypt, SHA256
mbedtls_sha256_init = mbedTLS, SHA256
mbedtls_sha256 = mbedTLS, SHA256

mbedtls_sha256_update_ret = mbedTLS, SHA256
mbedtls_sha256_update = mbedTLS, SHA256
mbedtls_sha256_finish_ret = mbedTLS, SHA256
mbedtls_sha256_finish = mbedTLS, SHA256
mbedtls_sha256_starts_ret = mbedTLS, SHA256
mbedtls_sha256_starts = mbedTLS, SHA256

CyaSSL_SHA256_Init = WolfSSL, SHA256
CyaSSL_SHA256_Update = WolfSSL, SHA256
CyaSSL_SHA256_Final = WolfSSL, SHA256

# ---- SHA384 ---- #
SHA384 = DEFINES;OpenSSL, SHA384
SHA384_Init = OpenSSL, SHA384
SHA384_Update = OpenSSL, SHA384
SHA384_Final = OpenSSL, SHA384
EVP_sha384 = OpenSSL, SHA384
wc_Sha384Hash = WolfSSL, SHA384
wc_InitSha384 = WolfSSL, SHA384
wc_Sha384Update = WolfSSL, SHA384
wc_Sha384Final = WolfSSL, SHA384
SHA384Update = WolfSSL, SHA384
SHA384Final = WolfSSL, SHA384
SHA384Init = WolfSSL, SHA384
sha384_init = LibTomCrypt, SHA384


# ---- SHA512 ---- #
SHA512 = DEFINES;OpenSSL, SHA512
SHA512_Init = OpenSSL, SHA512
SHA512_Update = OpenSSL, SHA512
SHA512_Final = OpenSSL, SHA512
EVP_sha512 = OpenSSL, SHA512
wc_Sha512Hash = WolfSSL, SHA512
wc_InitSha512 = WolfSSL, SHA512
wc_Sha512Update = WolfSSL, SHA512
wc_Sha512Final = WolfSSL, SHA512
SHA512Update = WolfSSL, SHA512
SHA512Final = WolfSSL, SHA512
SHA512Init = WolfSSL, SHA512
sha512_init = LibTomCrypt, SHA512

mbedtls_sha512_init = mbedTLS, SHA512
mbedtls_sha512_update = mbedTLS, SHA512
mbedtls_sha512_update_ret = mbedTLS, SHA512
mbedtls_sha512_finish_ret = mbedTLS, SHA512
mbedtls_sha512_finish = mbedTLS, SHA512
mbedtls_sha512 = mbedTLS, SHA512
mbedtls_sha512_starts = mbedTLS, SHA512
mbedtls_sha512_starts_ret = mbedTLS, SHA512

# ---- RIPEMD160 ---- #
RIPEMD160 = DEFINES;OpenSSL, RIPEMD160
RIPEMD160_Init = OpenSSL, RIPEMD160
RIPEMD160_Update = OpenSSL, RIPEMD160
RIPEMD160_Final = OpenSSL, RIPEMD160
EVP_ripemd160 = OpenSSL, RIPEMD160
mbedtls_ripemd160_init = mbedTLS, RIPEMD160
mbedtls_ripemd160_update = mbedTLS, RIPEMD160
mbedtls_ripemd160_finish = mbedTLS, RIPEMD160
mbedtls_ripemd160 = mbedTLS, RIPEMD160

# ---- MDC2 ---- #
MDC2 = DEFINES;OpenSSL, MDC2
MDC2_Init = OpenSSL, MDC2
MDC2_Update = OpenSSL, MDC2
MDC2_Final = OpenSSL, MDC2
EVP_mdc2 = OpenSSL, MDC2

# ---- BLAKE2B-512 ---- #
EVP_blake2b512 = OpenSSL, BLAKE2B_512

# ---- BLAKE-2B256 ---- #
EVP_blake2s256 = OpenSSL, BLAKE2S_256
WC_HASH_TYPE_BLAKE2S = WolfSSL, BLAKE2S

EVP_whirlpool = OpenSSL, WHIRLPOOL

# ---- GENERAL HASH---- #
CyaSSL_EVP_DigestFinal = WolfSSL, none
EVP_DigestInit_ex = OpenSSL, none, none, none, none
EVP_DigestUpdate = OpenSSL, none, none, none, none
EVP_DigestFinal_ex = OpenSSL, none, none, none, none
EVP_DigestInit = OpenSSL, none, none, none, none
EVP_DigestFinal = OpenSSL, none, none, none, none
EVP_DigestFinalXOF = OpenSSL, none, none, none, none
EVP_get_digestbyname = OpenSSL, none, none, none, none
gcry_md_open = LIBGCRYPT, none, none, none, none
gcry_md_read = LIBGCRYPT, none, none, none, none
gcry_md_enable = LIBGCRYPT, none, none, none, none
gcry_md_extract = LIBGCRYPT, none, none, none, none
gcry_md_hash_buffers = LIBGCRYPT, none, none, none, none
gcry_md_hash_buffer = LIBGCRYPT, none, none, none, none
gcry_md_write = LIBGCRYPT, none, none, none, none

mbedtls_md_init_ctx = mbedTLS, none, none, none, none
mbedtls_md_setup = mbedTLS, none, none, none, none
mbedtls_md_update = mbedTLS, none, none, none, none
mbedtls_md_finish = mbedTLS, none, none, none, none
mbedtls_md = mbedTLS, none, none, none, none
mbedtls_md_hmac_update = mbedTLS, none, none, none, none
mbedtls_md_hmac_finish = mbedTLS, none, none, none, none

HMAC =  DEFINES;OpenSSL, HMAC, none, none, none
HMAC_Init_ex = OpenSSL, HMAC, none, none, none
HMAC_Update = OpenSSL, HMAC, none, none, none
HMAC_Final = OpenSSL, HMAC, none, none, none
HMAC_Init = OpenSSL, HMAC, none, none, none
hmac_init = LibTomCrypt, HMAC, none, none, none
wc_HmacSetKey = WolfSSL, HMAC, none, none, none
wc_HmacUpdate = WolfSSL, HMAC, none, none, none
wc_HmacFinal = WolfSSL, HMAC, none, none, none
gcry_md_setkey = LIBGCRYPT, HMAC, none, none, none
mbedtls_md_hmac_starts = mbedTLS, HMAC, none, none, none
mbedtls_md_hmac = mbedTLS, HMAC, none, none, none

mbedtls_md_info_from_string = mbedTLS, none,
mbedtls_md_info_from_type = mbedTLS, none,
gcry_md_algo_name = LIBGCRYPT, none,
gcry_md_map_name = LIBGCRYPT, none,

HmacSetKey = WolfSSL, HMAC, none, none, none
HmacUpdate = WolfSSL, HMAC, none, none, none
HmacFinal = WolfSSL, HMAC, none, none, none


crypto_auth = LIBSODIUM, HMAC-SHA512-256
crypto_auth_verify = LIBSODIUM, HMAC-SHA512-256

CMAC_Init = OpenSSL, CMAC
CMAC_Update = OpenSSL, CMAC
CMAC_Final = OpenSSL, CMAC
EVP_PKEY_new_CMAC_key = OpenSSL, CMAC
EVP_PKEY_new_mac_key = OpenSSL, CMAC

krb5int_hmac = KerberosV5, CMAC,
gcry_mac_setkey = LIBGCRYPT, none,
wc_GmacSetKey = WolfSSL, GMAC,
wc_GmacUpdate = WolfSSL, GMAC,

# ---- KDFS ---- #
crypt = LIBC, CRYPT_LIBC
DES_fcrypt = LIBC, KDF_DES
DES_crypt = LIBC, KDF_DES
crypt_r = LIBC, CRYPT_LIBC

EVP_BytesToKey = OpenSSL, OPENSSL_KDF
PKCS5_PBKDF2_HMAC = OpenSSL, HMAC_KDF
PKCS5_PBKDF2_HMAC_SHA1 = OpenSSL, HMAC_SHA1_KDF
gcry_kdf_derive = LIBGCRYPT, none
wc_HKDF = WolfSSL, none
krb5int_pbkdf2 = KerberosV5, PBKDF2
krb5_c_string_to_key = KerberosV5, KERBEROS_KDF
krb5_string_to_key = KerberosV5, KERBEROS_KDF
krb5_init_creds_set_password = KerberosV5, KERBEROS_KDF
bcrypt_pbkdf = LIBC, BCRYPT, none, none, none

CyaSSL_EVP_BytesToKey = WolfSSL, WOLFSSL_KDF
pkcs12_kdf = LibTomCrypt, KERBEROS_KDF
krb5_string_to_key_data = KerberosV5, KERBEROS_KDF
krb5_string_to_key_data_salt = KerberosV5, KERBEROS_KDF
krb5_string_to_key_data_salt_opaque = KerberosV5, KERBEROS_KDF
krb5_string_to_key_salt = KerberosV5, KERBEROS_KDF
krb5_string_to_key_salt_opaque = KerberosV5, KERBEROS_KDF
krb5int_aes_string_to_key = KerberosV5, KERBEROS_KDF
krb5int_des_string_to_key = KerberosV5, KERBEROS_KDF
krb5int_arcfour_string_to_key = KerberosV5, KERBEROS_KDF
krb5int_dk_string_to_key = KerberosV5, KERBEROS_KDF
krb5int_camellia_string_to_key = KerberosV5, KERBEROS_KDF
krb5int_aes2_string_to_key = KerberosV5, KERBEROS_KDF

mbedtls_hkdf = mbedTLS, MBEDTLS_KDF

crypto_generichashl = LIBSODIUM, BLAKE2B
crypto_generichash_init = LIBSODIUM, BLAKE2B
crypto_shorthash = LIBSODIUM, SIPHASH
crypto_pwhash_str = LIBSODIUM, ARGON2I
crypto_pwhash = LIBSODIUM, ARGON2I
crypto_kdf_derive_from_key = LIBSODIUM, BLAKE2B


DeriveKey = CRYPTOPP, SCRYPT

mbedtls_pkcs12_pbe_sha1_rc4_128 = mbedTLS, PKCS12_PBE
mbedtls_pkcs12_derivation = mbedTLS, PKCS12_PBE
mbedtls_pkcs12_pbe = mbedTLS, PKCS12_PBE
mbedtls_pkcs5_pbes2 = mbedTLS, PBKDF2
mbedtls_pkcs5_pbkdf2_hmac = mbedTLS, PBKDF2


PKCS5_pbe_set0_algor = OpenSSL, OPENSSL_KDF
PKCS5_pbe_set = OpenSSL, OPENSSL_KDF
PKCS5_pbe2_set = OpenSSL, OPENSSL_KDF
PKCS5_pbe2_set_iv = OpenSSL, OPENSSL_KDF
PKCS5_pbkdf2_set = OpenSSL, PBKDF2
PKCS5_v2_PBE_keyivgen = OpenSSL, OPENSSL_KDF
PKCS5_v2_PBKDF2_keyivgen = OpenSSL, PBKDF2
PKCS5_PBE_keyivgen = OpenSSL, OPENSSL_KDF
PKCS12_PBE_keyivgen = OpenSSL, PKCS12_PBE
EVP_PBE_CipherInit = OpenSSL, OPENSSL_KDF

wc_PBKDF2 = WolfSSL, PBKDF2
wc_PBKDF1 = WolfSSL, PBKDF1
wc_PKCS12_PBKDF = WolfSSL, WOLFSSL_KDF
wc_PKCS12_PBKDF_ex = WolfSSL, WOLFSSL_KDF


# ---- AEAD ---- #
EVP_AEAD_CTX_init = OpenSSL, AEAD, none, none, none
EVP_AEAD_CTX_open = OpenSSL, AEAD, none, none, none
EVP_AEAD_CTX_seal = OpenSSL, AEAD, none, none, none
mbedtls_cipher_auth_encrypt = mbedTLS, AEAD, none, none, none
mbedtls_cipher_auth_decrypt = mbedTLS, AEAD, none, none, none


# ---- AES_GCM ---- #
id-aes256-GCM = DEFINES, AES_GCM, 256, GCM, none,
id-aes128-GCM = DEFINES, AES_GCM, 128, GCM, none,
EVP_aes_128_gcm = OpenSSL, AES_GCM, 128, GCM, none,
EVP_aes_192_gcm = OpenSSL, AES_GCM, 192, GCM, none,
EVP_aes_256_gcm = OpenSSL, AES_GCM, 256, GCM, none,
EVP_aead_aes_128_gcm = OpenSSL, AES_GCM, 128, GCM, none,
EVP_aead_aes_192_gcm = OpenSSL, AES_GCM, 192, GCM, none,
EVP_aead_aes_256_gcm = OpenSSL, AES_GCM, 256, GCM, none,
aes-128-gcm = OpenSSL, AES_GCM, 128, GCM, none,
aes-192-gcm = OpenSSL, AES_GCM, 192, GCM, none,
aes-256-gcm = OpenSSL, AES_GCM, 256, GCM, none,

mbedtls_gcm_setkey = mbedTLS, AES_GCM, none, GCM,
mbedtls_gcm_crypt_and_tag = mbedTLS, AES_GCM, none, GCM,
mbedtls_gcm_auth_decrypt = mbedTLS, AES_GCM, none, GCM,
mbedtls_gcm_starts = mbedTLS, AES_GCM, none, GCM,

wc_AesGcmSetKey = WolfSSL, AES_GCM, none, GCM,
wc_AesGcmEncrypt = WolfSSL, AES_GCM, none, GCM,
wc_AesGcmDecrypt = WolfSSL, AES_GCM, none, GCM,


# ---- AES_CCM ---- #
EVP_aes_128_ccm = OpenSSL, AES_CCM, 128, CCM,
EVP_aes_192_ccm = OpenSSL, AES_CCM, 192, CCM,
EVP_aes_256_ccm = OpenSSL, AES_CCM, 256, CCM,

wc_AesCcmSetKey = WolfSSL, AES_CCM, none, CCM,
wc_AesCcmEncrypt = WolfSSL, AES_CCM, none, CCM,
wc_AesCcmDecrypt = WolfSSL, AES_CCM, none, CCM,

mbedtls_ccm_setkey = mbedTLS, AES_CCM, none, CCM,
mbedtls_ccm_encrypt_and_tag = mbedTLS, AES_CCM, none, CCM,
mbedtls_ccm_star_encrypt_and_tag = mbedTLS, AES_CCM, none, CCM,
mbedtls_ccm_auth_decrypt = mbedTLS, AES_CCM, none, CCM,
mbedtls_ccm_star_auth_decrypt = mbedTLS, AES_CCM, none, CCM,

# ---- AES_OCB ---- #
EVP_aes_128_ocb = OpenSSL, AES_OCB, 128, OCB,
EVP_aes_192_ocb = OpenSSL, AES_OCB, 192, OCB,
EVP_aes_256_ocb = OpenSSL, AES_OCB, 256, OCB,

# ---- CHACHA20_POLY1305 ---- #
EVP_chacha20_poly1305 = OpenSSL, CHACHA20_POLY1305
EVP_aead_xchacha20_poly1305 = OpenSSL, CHACHA20_POLY1305
EVP_aead_chacha20_poly1305  = OpenSSL, CHACHA20_POLY1305

crypto_secretbox_easy = LIBSODIUM, CHACHA20_POLY1305
crypto_secretbox_open_easy = LIBSODIUM, CHACHA20_POLY1305
crypto_secretbox_detached = LIBSODIUM, CHACHA20_POLY1305
crypto_secretbox_open_detached = LIBSODIUM, CHACHA20_POLY1305
crypto_secretstream_xchacha20poly1305_init_pull = LIBSODIUM, CHACHA20_POLY1305
crypto_secretstream_xchacha20poly1305_init_push = LIBSODIUM, CHACHA20_POLY1305

# ---- TLS ---- #
EVP_aes_128_cbc_hmac_sha1 = OpenSSL, AES_128_CBC_HMAC_SHA1
EVP_aes_256_cbc_hmac_sha1 = OpenSSL, AES_256_CBC_HMAC_SHA1
EVP_aes_128_cbc_hmac_sha256 = OpenSSL, AES_128_CBC_HMAC_SHA256
EVP_aes_256_cbc_hmac_sha256 = OpenSSL, AES_256_CBC_HMAC_2SHA56
EVP_rc4_hmac_md5 = OpenSSL, RC4_HMAC_MD5

mbedtls_gcm_update = mbedTLS, AES_GCM, none, GCM,
mbedtls_gcm_finish = mbedTLS, AES_GCM, none, GCM,

# ---- Public key cryptography ---- #
# generate = 0/sign = 1/verify = 2
RSA = DEFINES, RSA, none,
RSA_public_encrypt = OpenSSL, RSA, none, none, 0, none,
RSA_private_decrypt = OpenSSL, RSA, none, none, 1, none,
RSA_private_encrypt = OpenSSL, RSA, none, none, 0, none,
RSA_public_decrypt = OpenSSL, RSA, none, none, 1, none,
EVP_PKEY_CTX_set_rsa_padding = OpenSSL, RSA, none, none, none, none,

wc_RsaPublicEncrypt_ex = WolfSSL, RSA, none, none, 0, none,
wc_RsaPrivateDecrypt_ex = WolfSSL, RSA, none, none, 1, none,
wc_RsaPrivateDecryptInline_ex = WolfSSL, RSA, none, none, 1, none,
wc_RsaDirect = WolfSSL, RSA, none, none, none, none,
rsa_pkcs1_decrypt = mbedTLS, RSA, none, none, 1,  none, none, RSA_PKCS1_PADDING
mbedtls_rsa_pkcs1_decrypt = mbedTLS, RSA , none, none, 1, none, none, RSA_PKCS1_PADDING
rsa_pkcs1_encrypt = mbedTLS, RSA, none, none, 0, none, none, RSA_PKCS1_PADDING
mbedtls_rsa_pkcs1_encrypt = mbedTLS, RSA, none, none, 0, none, none, RSA_PKCS1_PADDING
rsa_pkcs1_sign = mbedTLS, RSA, none, none, none, 1, none, RSA_PKCS1_PADDING
mbedtls_rsa_pkcs1_sign = mbedTLS, RSA, none, none, none, none, 0, RSA_PKCS1_PADDING
rsa_pkcs1_verify = mbedTLS, RSA, none, none, none, none, 1, RSA_PKCS1_PADDING
mbedtls_rsa_pkcs1_verify = mbedTLS, RSA, none, none, none, none, 1, RSA_PKCS1_PADDING
rsa_rsaes_pkcs1_v15_encrypt = mbedTLS, RSA, none, none, 0, none, none, RSA_PKCS1_PADDING
mbedtls_rsa_rsaes_pkcs1_v15_encrypt = mbedTLS, RSA, none, none, 0, none, none, RSA_PKCS1_PADDING
rsa_rsaes_pkcs1_v15_decrypt  = mbedTLS, RSA, none, none, 1, none, none, RSA_PKCS1_PADDING
mbedtls_rsa_rsaes_pkcs1_v15_decrypt = mbedTLS, RSA, none, none, 1, none, none, RSA_PKCS1_PADDING
rsa_rsassa_pkcs1_v15_sign  = mbedTLS, RSA, none, none, none, none, 0, RSA_PKCS1_PADDING
mbedtls_rsa_rsassa_pkcs1_v15_sign = mbedTLS, RSA, none, none, none, none, 0, RSA_PKCS1_PADDING
rsa_rsassa_pkcs1_v15_verify  = mbedTLS, RSA, none, none, none, none, 1, RSA_PKCS1_PADDING
mbedtls_rsa_rsassa_pkcs1_v15_verify = mbedTLS, RSA, none, none, none, none, 1, RSA_PKCS1_PADDING
mbedtls_rsa_set_padding = mbedTLS, RSA, none, none, none, none, none,


gcry_sexp_build = LIBGCRYPT, none, none, none, none
X509_digest = OpenSSL, X509, none, none, none
gnutls_x509_crt_get_fingerprint = GnuTLS, X509, none, none, none
DSA = OpenSSL, DSA, none
EVP_DigestSignInit = OpenSSL, DSA, none, none, none, none, 0
EVP_DigestSignUpdate = OpenSSL, DSA, none, none, none, none, 0
EVP_DigestSignFinal = OpenSSL, DSA, none, none, none, none, 0
EVP_DigestVerifyInit = OpenSSL, DSA, none, none, none, none, 1
EVP_DigestVerifyUpdate = OpenSSL, DSA, none, none, none, none, 1
EVP_DigestVerifyFinal = OpenSSL, DSA, none, none, none, none, 1


EVP_PKEY_decrypt  = OpenSSL, none, none, none, none, none, none,
EVP_PKEY_encrypt  = OpenSSL, none, none, none, none, none, none,
BN_hex2bn  = OpenSSL, none, none, none, none, none, none,
BN_set_word  = OpenSSL, none, none, none, none, none, none,
RSA_padding_add_PKCS1_type_1  = OpenSSL, RSA, none, none, none, none, none, RSA_PKCS1_PADDING,
RSA_padding_add_PKCS1_type_2  = OpenSSL, RSA, none, none, none, none, none, RSA_PKCS1_PADDING,
RSA_padding_add_PKCS1_OAEP  = OpenSSL, RSA, none, none, none, none, none, RSA_PKCS1_OAEP_PADDING,
RSA_padding_add_PKCS1_OAEP_mgf1  = OpenSSL, RSA, none, none, none, none, none, RSA_PKCS1_OAEP_PADDING,
RSA_padding_add_SSLv23  = OpenSSL, RSA, none, none, none, none, none, RSA_PKCS1_PADDING

mbedtls_rsa_rsaes_oaep_encrypt = mbedTLS, RSA, none, none, 0, none, none, RSA_PKCS1_OAEP_PADDING
mbedtls_rsa_rsaes_oaep_decrypt = mbedTLS, RSA, none, none, 1, none, none, RSA_PKCS1_OAEP_PADDING

gcry_sexp_new = LIBGCRYPT, none, none, none, none

wc_RsaPublicEncrypt  = OpenSSL, RSA,
wc_RsaPrivateDecrypt  = OpenSSL, RSA,
mbedtls_rsa_init  = OpenSSL, RSA,
RSA_padding_add_none  = OpenSSL, RSA,
RSA_padding_add_X931  = OpenSSL, RSA,


X509_ALGOR_set_md  = OpenSSL, X509
X509_sign  = OpenSSL, X509
X509_REQ_sign  = OpenSSL, X509
X509_CRL_sign  = OpenSSL, X509
X509_CRL_digest  = OpenSSL, X509
X509_pubkey_digest  = OpenSSL, X509
X509_REQ_digest  = OpenSSL, X509
X509_NAME_digest  = OpenSSL, X509
PKCS7_ISSUER_AND_SERIAL_digest  = OpenSSL, X509
gnutls_x509_crt_privkey_sign  = GnuTLS, X509

EVP_PKEY_assign_RSA  = OpenSSL, RSA
EVP_PKEY_assign_DSA  = OpenSSL, DSA
EVP_PKEY_assign_DH  = OpenSSL, DH
EVP_PKEY_assign_EC_KEY  = OpenSSL, EC
EVP_PKEY_set1_RSA  = OpenSSL, RSA
EVP_PKEY_set1_DSA  = OpenSSL, DSA
EVP_PKEY_set1_DH  = OpenSSL, DH
EVP_PKEY_set1_EC_KEY  = OpenSSL, EC
RSA_generate_key  = OpenSSL, RSA
RSA_generate_key_ex  = OpenSSL, RSA

CyaSSL_RSA_generate_key_ex  = WolfSSL, RSA

EVP_PKEY_CTX_set_rsa_keygen_bits  = OpenSSL, RSA
SSL_CTX_set_cipher_list  = OpenSSL, SSL_TLS
SSL_set_cipher_list  = OpenSSL, SSL_TLS
SSL_CTX_set_ciphersuites  = OpenSSL, SSL_TLS
SSL_set_ciphersuites  = OpenSSL, SSL_TLS

CyaSSL_CTX_set_cipher_list  = WolfSSL, SSL_TLS
wolfSSL_CTX_set_cipher_list  = WolfSSL, SSL_TLS

EVP_PKEY_CTX_ctrl  = OpenSSL, none,
EVP_PKEY_CTX_ctrl_str  = OpenSSL, none,
EVP_PKEY_new_raw_private_key  = OpenSSL, none,
EVP_PKEY_new_raw_public_key  = OpenSSL, none,
EVP_ecdsa  = OpenSSL, EC
BN_dec2bn  = OpenSSL,  none,
EC_KEY_new_by_curve_name  = OpenSSL, EC,

# ------ DEFINE ------ #
# ------ DEFINE ------ #
# ------ DEFINE ------ #

RC4-HMAC-MD5 = DEFINES, RC4_HMAC_MD5,
AES-256-CBC-HMAC-SHA1 =  DEFINES, AES_256_CBC_HMAC_SHA1
AES-192-CBC-HMAC-SHA1 =  DEFINES, AES_192_CBC_HMAC_SHA1
AES-128-CBC-HMAC-SHA1 =  DEFINES, AES_128_CBC_HMAC_SHA1

BCRYPT_2A = = DEFINES, BCRYPT_2A,
BCRYPT_2B = DEFINES, BCRYPT_2B,
BCRYPT_OBSOLETE = DEFINES, BCRYPT_OBSOLETE,

GCRY_KDF_SIMPLE_S2K = DEFINES, S2K,
GCRY_KDF_SALTED_S2K = DEFINES, S2K,
GCRY_KDF_ITERSALTED_S2K = DEFINES, S2K,
GCRY_KDF_PBKDF1 = DEFINES, PBKDF1
GCRY_KDF_PBKDF2 = DEFINES, PBKDF2
GCRY_KDF_SCRYPT = DEFINES, SCRYPT

GCRYCTL_ANY_INITIALIZATION_P = DEFINES,
GCRYCTL_CFB_SYNC = DEFINES, none, none, CFB,
GCRYCTL_CLEAR_DEBUG_FLAGS = DEFINES,
GCRYCTL_CLOSE_RANDOM_DEVICE = DEFINES,
GCRYCTL_DISABLE_ALGO = DEFINES,
GCRYCTL_DISABLE_HWF = DEFINES,
GCRYCTL_DISABLE_INTERNAL_LOCKING = DEFINES,
GCRYCTL_DISABLE_LOCKED_SECMEM = DEFINES,
GCRYCTL_DISABLE_PRIV_DROP = DEFINES,
GCRYCTL_DISABLE_SECMEM = DEFINES,
GCRYCTL_DISABLE_SECMEM_WARN = DEFINES,
GCRYCTL_DRBG_REINIT = DEFINES,
GCRYCTL_DROP_PRIVS = DEFINES,
GCRYCTL_DUMP_MEMORY_STATS = DEFINES,
GCRYCTL_DUMP_RANDOM_STATS = DEFINES,
GCRYCTL_DUMP_SECMEM_STATS = DEFINES,
GCRYCTL_ENABLE_ALGO = DEFINES,
GCRYCTL_ENABLE_M_GUARD = DEFINES,
GCRYCTL_ENABLE_QUICK_RANDOM = DEFINES,
GCRYCTL_FAKED_RANDOM_P = DEFINES,
GCRYCTL_FAST_POLL = DEFINES,
GCRYCTL_FINALIZE = DEFINES,
GCRYCTL_FIPS_MODE_P = DEFINES,
GCRYCTL_FORCE_FIPS_MODE = DEFINES,
GCRYCTL_GET_ALGO_NENCR = DEFINES,
GCRYCTL_GET_ALGO_NPKEY = DEFINES,
GCRYCTL_GET_ALGO_NSIGN = DEFINES,
GCRYCTL_GET_ALGO_NSKEY = DEFINES,
GCRYCTL_GET_ALGO_USAGE = DEFINES,
GCRYCTL_GET_ASNOID = DEFINES,
GCRYCTL_GET_BLKLEN = DEFINES,
GCRYCTL_GET_CURRENT_RNG_TYPE = DEFINES,
GCRYCTL_GET_KEYLEN = DEFINES,
GCRYCTL_GET_TAGLEN = DEFINES,
GCRYCTL_INACTIVATE_FIPS_FLAG = DEFINES,
GCRYCTL_INITIALIZATION_FINISHED = DEFINES,
GCRYCTL_INITIALIZATION_FINISHED_P = DEFINES,
GCRYCTL_INIT_SECMEM = DEFINES,
GCRYCTL_IS_ALGO_ENABLED = DEFINES,
GCRYCTL_IS_SECURE = DEFINES,
GCRYCTL_OPERATIONAL_P = DEFINES,
GCRYCTL_PRINT_CONFIG = DEFINES,
GCRYCTL_REACTIVATE_FIPS_FLAG = DEFINES,
GCRYCTL_REINIT_SYSCALL_CLAMP = DEFINES,
GCRYCTL_RESET = DEFINES,
GCRYCTL_RESUME_SECMEM_WARN = DEFINES,
GCRYCTL_SELFTEST = DEFINES,
GCRYCTL_SET_CBC_CTS = DEFINES, none, none, CTS,
GCRYCTL_SET_CBC_MAC = DEFINES,  none, none, CCM,
GCRYCTL_SET_CCM_LENGTHS = DEFINES, none, none, CCM
GCRYCTL_SET_DEBUG_FLAGS = DEFINES,
GCRYCTL_SET_ENFORCED_FIPS_FLAG = DEFINES,
GCRYCTL_SET_PREFERRED_RNG_TYPE = DEFINES,
GCRYCTL_SET_RANDOM_DAEMON_SOCKET = DEFINES,
GCRYCTL_SET_RANDOM_SEED_FILE = DEFINES,
GCRYCTL_SET_RNDEGD_SOCKET = DEFINES,
GCRYCTL_SET_SBOX = DEFINES,
GCRYCTL_SET_TAGLEN = DEFINES,
GCRYCTL_SET_THREAD_CBS = DEFINES,
GCRYCTL_SET_VERBOSITY = DEFINES,
GCRYCTL_START_DUMP = DEFINES,
GCRYCTL_STOP_DUMP = DEFINES,
GCRYCTL_SUSPEND_SECMEM_WARN = DEFINES,
GCRYCTL_TERM_SECMEM = DEFINES,
GCRYCTL_TEST_ALGO = DEFINES,
GCRYCTL_UPDATE_RANDOM_SEED_FILE = DEFINES,
GCRYCTL_USE_RANDOM_DAEMON = DEFINES,
GCRYCTL_USE_SECURE_RNDPOOL = DEFINES,
GCRY_CIPHER_CBC_CTS = DEFINES, none, none, CTS
GCRY_CIPHER_CBC_MAC = DEFINES, none, none, CCM
GCRY_CIPHER_DES = DEFINES, DES, 56, none, none, 64,
GCRY_CIPHER_ENABLE_SYNC = DEFINES,
GCRY_CIPHER_GOST28147 = DEFINES,
GCRY_CIPHER_MODE_AESWRAP = DEFINES, AES, none, WRAP,
GCRY_CIPHER_MODE_CBC = DEFINES, none, none, CBC,
GCRY_CIPHER_MODE_CCM = DEFINES, none, none, CCM,
GCRY_CIPHER_MODE_CFB = DEFINES, none, none, CFB,
GCRY_CIPHER_MODE_CFB8 = DEFINES, none, none, CFB8,
GCRY_CIPHER_MODE_CTR = DEFINES, none, none, CTR,
GCRY_CIPHER_MODE_ECB = DEFINES, none, none, ECB,
GCRY_CIPHER_MODE_GCM = DEFINES, none, none, GCM,
GCRY_CIPHER_MODE_NONE = DEFINES,
GCRY_CIPHER_MODE_OCB = DEFINES, none, none, OCB,
GCRY_CIPHER_MODE_OFB = DEFINES, none, none, OFB,
GCRY_CIPHER_MODE_POLY1305 = DEFINES, none, none, POLY1305,
GCRY_CIPHER_MODE_STREAM = DEFINES,
GCRY_CIPHER_MODE_XTS = DEFINES, none, none, XTS,
GCRY_CIPHER_NONE = DEFINES,
GCRY_CIPHER_RFC2268_128 = DEFINES, RC2, 128
GCRY_CIPHER_RFC2268_40 = DEFINES, RC2, 40
GCRY_CIPHER_SAFER_SK128 = DEFINES, SAFER_SK, 128
GCRY_CIPHER_SALSA20 = DEFINES, SALSA20
GCRY_CIPHER_SALSA20R12 = DEFINES, SALSA20R12
GCRY_CIPHER_SECURE = DEFINES,
GCRY_CIPHER_SEED = DEFINES,
GCRY_CIPHER_TWOFISH = DEFINES, TWOFISH, none, none, none, 128,
GCRY_KDF_NONE = DEFINES,
GCRY_MD_BLAKE2B_160 = DEFINES, BLAKE2B_160
GCRY_MD_BLAKE2B_384 = DEFINES, BLAKE2B_384
GCRY_MD_BLAKE2S_128 = DEFINES, BLAKE2B_128
GCRY_MD_BLAKE2S_160 = DEFINES, BLAKE2S_160
GCRY_MD_BLAKE2S_224 = DEFINES, BLAKE2S_224
GCRY_MD_BLAKE2S_256 = DEFINES, BLAKE2S_256
GCRY_MD_CRC24_RFC2440 = DEFINES,
GCRY_MD_CRC32 = DEFINES,
GCRY_MD_CRC32_RFC1510 = DEFINES,
GCRY_MD_FLAG_BUGEMU1 = DEFINES,
GCRY_MD_FLAG_HMAC = DEFINES, HMAC
GCRY_MD_FLAG_SECURE = DEFINES,
GCRY_MD_GOSTR3411_94 = DEFINES, GOST,
GCRY_MD_GOSTR3411_CP = DEFINES, GOST,
GCRY_MD_HAVAL = DEFINES, HAVAL
GCRY_MD_NONE = DEFINES,
GCRY_MD_SHA3_224 = DEFINES, SHA3_224
GCRY_MD_SHA3_256 = DEFINES, SHA3_256
GCRY_MD_SHA3_384 = DEFINES, SHA3_384
GCRY_MD_SHA3_512 = DEFINES, SHA3_512
GCRY_MD_SHAKE128 = DEFINES, SHAKE128
GCRY_MD_SHAKE256 = DEFINES, SHAKE256
GCRY_MD_STRIBOG256 = DEFINES, STRIBOG_256
GCRY_MD_STRIBOG512 = DEFINES, STRIBOG_512
GCRY_MD_TIGER = DEFINES, TIGER
GCRY_MD_TIGER1 = DEFINES, TIGER1
GCRY_MD_TIGER2 = DEFINES, TIGER2
GCRY_MD_WHIRLPOOL = DEFINES, WHIRLPOOL
GCRY_STRONG_RANDOM = DEFINES,
GCRY_VERY_STRONG_RANDOM = DEFINES,
GCRY_WEAK_RANDOM = DEFINES,
MBEDTLS_CIPHER_AES_128_CBC = DEFINES, AES, 128, CBC, none,128
MBEDTLS_CIPHER_AES_128_CCM = DEFINES, AES, 128, CCM, none, 128
MBEDTLS_CIPHER_AES_128_CFB128 = DEFINES, AES, 128, CFB128, none, 128
MBEDTLS_CIPHER_AES_128_CTR = DEFINES, AES, 128, CTR, none, 128
MBEDTLS_CIPHER_AES_128_ECB = DEFINES, AES, 128, ECB, none, 128
MBEDTLS_CIPHER_AES_128_GCM = DEFINES, AES, 128, GCM, none, 128
MBEDTLS_CIPHER_AES_192_CBC = DEFINES, AES, 192, CBC, none, 128
MBEDTLS_CIPHER_AES_192_CCM = DEFINES, AES, 192, CCM, none, 128
MBEDTLS_CIPHER_AES_192_CFB128 = DEFINES, AES, 192, CFB128, none, 128
MBEDTLS_CIPHER_AES_192_CTR = DEFINES, AES, 192, CTR, none, 128
MBEDTLS_CIPHER_AES_192_ECB = DEFINES, AES, 192, ECB, none, 128
MBEDTLS_CIPHER_AES_192_GCM = DEFINES, AES, 192, GCM, none, 128
MBEDTLS_CIPHER_AES_256_CBC = DEFINES, AES, 256, CBC, none, 128
MBEDTLS_CIPHER_AES_256_CCM = DEFINES, AES, 256, CCM, none, 128
MBEDTLS_CIPHER_AES_256_CFB128 = DEFINES, AES, 256, CFB128, none, 128
MBEDTLS_CIPHER_AES_256_CTR = DEFINES, AES, 256, CTR, none, 128
MBEDTLS_CIPHER_AES_256_ECB = DEFINES, AES, 256, ECB, none, 128
MBEDTLS_CIPHER_AES_256_GCM = DEFINES, AES, 256, GCM, none, 128
MBEDTLS_CIPHER_ARC4_128 = DEFINES, RC4, 128, none, none, none,
MBEDTLS_CIPHER_BLOWFISH_CBC = DEFINES, BLOWFISH, none, CBC, none, 64,
MBEDTLS_CIPHER_BLOWFISH_CFB64 = DEFINES, BLOWFISH, none, CFB64, none, 64,
MBEDTLS_CIPHER_BLOWFISH_CTR = DEFINES, BLOWFISH, none, CTR, none, 64,
MBEDTLS_CIPHER_BLOWFISH_ECB = DEFINES, BLOWFISH, none, ECB, none, 64,
MBEDTLS_CIPHER_CAMELLIA_128_CBC = DEFINES, CAMELLIA, 256, CBC, none, 128,
MBEDTLS_CIPHER_CAMELLIA_128_CCM = DEFINES, CAMELLIA, 256, CCM, none, 128,
MBEDTLS_CIPHER_CAMELLIA_128_CFB128 = DEFINES, CAMELLIA, 128, CFB128, none, 128,
MBEDTLS_CIPHER_CAMELLIA_128_CTR = DEFINES, CAMELLIA, 128, CTR, none, 128,
MBEDTLS_CIPHER_CAMELLIA_128_ECB = DEFINES, CAMELLIA, 128, ECB, none, 128,
MBEDTLS_CIPHER_CAMELLIA_128_GCM = DEFINES, CAMELLIA, 128, GCM, none, 128,
MBEDTLS_CIPHER_CAMELLIA_192_CBC = DEFINES, CAMELLIA, 192, CBC, none, 128,
MBEDTLS_CIPHER_CAMELLIA_192_CCM = DEFINES, CAMELLIA, 192, CCM, none, 128,
MBEDTLS_CIPHER_CAMELLIA_192_CFB128 = DEFINES, CAMELLIA, 192, CFB128, none, 128,
MBEDTLS_CIPHER_CAMELLIA_192_CTR = DEFINES, CAMELLIA, 192, CTR, none, 128,
MBEDTLS_CIPHER_CAMELLIA_192_ECB = DEFINES, CAMELLIA, 192, ECB, none, 128,
MBEDTLS_CIPHER_CAMELLIA_192_GCM = DEFINES, CAMELLIA, 192, GCM, none, 128,
MBEDTLS_CIPHER_CAMELLIA_256_CBC = DEFINES, CAMELLIA, 256, CBC, none, 128,
MBEDTLS_CIPHER_CAMELLIA_256_CCM = DEFINES, CAMELLIA, 256, CCM, none, 128,
MBEDTLS_CIPHER_CAMELLIA_256_CFB128 = DEFINES, CAMELLIA, 256, CFB128, none, 128,
MBEDTLS_CIPHER_CAMELLIA_256_CTR = DEFINES, CAMELLIA, 256, CTR, none, 128,
MBEDTLS_CIPHER_CAMELLIA_256_ECB = DEFINES, CAMELLIA, 256, ECB, none, 128,
MBEDTLS_CIPHER_CAMELLIA_256_GCM = DEFINES, CAMELLIA, 256, GCM, none, 128,
MBEDTLS_CIPHER_DES_CBC = DEFINES, DES, 56, CBC, none, 64,
MBEDTLS_CIPHER_DES_ECB = DEFINES, DES, 56, ECB, none, 64,
MBEDTLS_CIPHER_DES_EDE3_CBC = DEFINES, TDES3, 168, CBC, none, 64,
MBEDTLS_CIPHER_DES_EDE3_ECB = DEFINES, TDES3, 112, ECB, none, 64,
MBEDTLS_CIPHER_DES_EDE_CBC = DEFINES, TDES2, 112, CBC, none, 64,
MBEDTLS_CIPHER_DES_EDE_ECB = DEFINES, TDES2, 112, ECB, none, 64,
MBEDTLS_CIPHER_ID_3DES = DEFINES, TDES3, none, none, none, 64,
MBEDTLS_CIPHER_ID_AES = DEFINES, AES, none, none, none, 128,
MBEDTLS_CIPHER_ID_ARC4 = DEFINES, RC4, none, none, none, none,
MBEDTLS_CIPHER_ID_BLOWFISH = DEFINES, BLOWFISH, none, none, none, 64,
MBEDTLS_CIPHER_ID_CAMELLIA = DEFINES, CAMELLIA, none, none, none, 128,
MBEDTLS_CIPHER_ID_DES = DEFINES, TDES3, none, none, none, 64,
MBEDTLS_CIPHER_ID_NONE = DEFINES,
MBEDTLS_CIPHER_ID_NULL = DEFINES,
MBEDTLS_CIPHER_NONE = DEFINES,
MBEDTLS_CIPHER_NULL = DEFINES,
MBEDTLS_MD_MD2 = DEFINES, MD2
MBEDTLS_MD_MD4 = DEFINES, MD4
MBEDTLS_MD_MD5 = DEFINES, MD5
MBEDTLS_MD_NONE = DEFINES,
MBEDTLS_MD_RIPEMD160 = DEFINES, RIPEMD160
MBEDTLS_MD_SHA1 = DEFINES, SHA1
MBEDTLS_MD_SHA224 = DEFINES, SHA224
MBEDTLS_MD_SHA256 = DEFINES, SHA256
MBEDTLS_MD_SHA384 = DEFINES, SHA384
MBEDTLS_MD_SHA512 = DEFINES, SHA512
MBEDTLS_MODE_CBC = DEFINES, none, none, CBC,
MBEDTLS_MODE_CCM = DEFINES, none, none, CCM,
MBEDTLS_MODE_CFB = DEFINES, none, none, CFB,
MBEDTLS_MODE_CTR = DEFINES, none, none, CTR,
MBEDTLS_MODE_ECB = DEFINES, none, none, ECB,
MBEDTLS_MODE_GCM = DEFINES, none, none, GCM,
MBEDTLS_MODE_NONE = DEFINES,
MBEDTLS_MODE_OFB = DEFINES, none, none, OFB,
MBEDTLS_MODE_STREAM = DEFINES,
MBEDTLS_PADDING_NONE = DEFINES, RSA, none, none, none, none, none, MBEDTLS_PADDING_NONE
MBEDTLS_PADDING_ONE_AND_ZEROS = DEFINES, RSA, none, none, none, none, none, MBEDTLS_PADDING_ONE_AND_ZEROS
MBEDTLS_PADDING_PKCS7 = DEFINES, RSA, none, none, none, none, none, MBEDTLS_PADDING_PKCS7
MBEDTLS_PADDING_ZEROS = DEFINES, RSA, none, none, none, none, none, MBEDTLS_PADDING_ZEROS
MBEDTLS_PADDING_ZEROS_AND_LEN = DEFINES, RSA, none, none, none, none, none, MBEDTLS_PADDING_ZEROS_AND_LEN
MBEDTLS_RSA_PKCS_V15 = DEFINES, RSA, none, none, none, none, none, MBEDTLS_RSA_PKCS_V15
MBEDTLS_RSA_PKCS_V21 = DEFINES, RSA, none, none, none, none, none, MBEDTLS_RSA_PKCS_V21
GCRY_MD_BLAKE2B_512 = DEFINES, BLAKE2B_512
WC_HASH_TYPE_BLAKE2B = DEFINES, BLAKE2B
GCRY_MD_BLAKE2B_256 = DEFINES, BLAKE2B_256
GCRY_CIPHER_DES_SK = DEFINES, DES, 56, none, none, 64,
GCRY_CIPHER_3DES = DEFINES, TDES3, 168, none, none, 64,
GCRY_CIPHER_BLOWFISH = DEFINES, BLOWFISH, none, none, none, 64,
GCRY_CIPHER_CAMELLIA128 = DEFINES, CAMELLIA, 128, none, none, 128,
GCRY_CIPHER_CAMELLIA192 = DEFINES, CAMELLIA, 192, none, none, 128,
GCRY_CIPHER_CAMELLIA256 = DEFINES, CAMELLIA, 256, none, none, 128,
GCRY_CIPHER_CAST5 = DEFINES, CAST5, 128, none, none, 64,
GCRY_CIPHER_ARCFOUR = DEFINES, RC4,
GCRY_CIPHER_IDEA = DEFINES, IDEA, 128, none, none, 64,
GCRY_CIPHER_TWOFISH128 = DEFINES, TWOFISH, 128, none, none, 128,
GCRY_CIPHER_CHACHA20 = DEFINES, CHACHA20,
GCRY_CIPHER_AES = DEFINES, AES, 128, none, none, 128,
GCRY_CIPHER_AES192 = DEFINES, AES, 192, none, none, 128,
GCRY_CIPHER_AES256 = DEFINES, AES, 256, none, none, 128,
GCRY_CIPHER_SERPENT128  = DEFINES, SERPENT, 128, none, none, 128,
GCRY_CIPHER_SERPENT192  = DEFINES, SERPENT, 192, none, none, 128,
GCRY_CIPHER_SERPENT256  = DEFINES, SERPENT, 256, none, none, 128,
GCRY_MD_MD2 = DEFINES, MD2
WC_HASH_TYPE_MD2 = DEFINES, MD2
GCRY_MD_MD4 = DEFINES, MD4
WC_HASH_TYPE_MD4 = DEFINES, MD4
GCRY_MD_MD5 = DEFINES, MD5
WC_HASH_TYPE_MD5 = DEFINES, MD5
GCRY_MD_SHA1 = DEFINES, SHA1
WC_HASH_TYPE_SHA = DEFINES, SHA1
GCRY_MD_SHA224 = DEFINES, SHA224
WC_HASH_TYPE_SHA224 = DEFINES, SHA224
GCRY_MD_SHA256 = DEFINES, SHA256
WC_HASH_TYPE_SHA256 = DEFINES, SHA256
GCRY_MD_SHA384 = DEFINES, SHA384
WC_HASH_TYPE_SHA384 = DEFINES, SHA384
GCRY_MD_SHA512 = DEFINES, SHA512
WC_HASH_TYPE_SHA512 = DEFINES, SHA512
GCRY_MD_RMD160 = DEFINES, RIPEMD160

# OpenSSL rsa padding
RSA_PKCS1_PADDING       = DEFINES, RSA, none, none, none, none, none, RSA_PKCS1_PADDING
RSA_SSLV23_PADDING      = DEFINES, RSA, none, none, none, none, none, RSA_PKCS1_PADDING
RSA_NO_PADDING          = DEFINES, RSA, none, none, none, none, none, RSA_NO_PADDING
RSA_PKCS1_OAEP_PADDING  = DEFINES, RSA, none, none, none, none, none, RSA_PKCS1_OAEP_PADDING
RSA_X931_PADDING        = DEFINES, RSA, none, none, none, none, none, RSA_X931_PADDING
RSA_PKCS1_PSS_PADDING   = DEFINES, RSA, none, none, none, none, none, RSA_PKCS1_PSS_PADDING
RSA_PKCS1_PADDING_SIZE  = DEFINES, RSA, none, none, none, none, none,
RSA_PKCS1_WITH_TLS_PADDING = DEFINES, RSA, none, none, none, none, none, RSA_PKCS1_WITH_TLS_PADDING
WC_HASH_TYPE_MD5_SHA  = DEFINES, SHA
WC_HASH_TYPE_NONE = DEFINES,
WC_HASH_TYPE_SHA3_224 = DEFINES, SHA3_224
WC_HASH_TYPE_SHA3_256 = DEFINES, SHA3_256
WC_HASH_TYPE_SHA3_384 = DEFINES, SHA3_384
WC_HASH_TYPE_SHA3_512 = DEFINES, SHA3_512
MBEDTLS_HMAC = DEFINES, HMAC,

md_gost94 = DEFINES, GOST
RSA-MD5 = DEFINES, RSA_MD5
sl2-md5 = DEFINES, MD5
ssl3-sha1 = DEFINES, SHA1
ssl3-md5 = DEFINES, MD5
gost89-cnt = DEFINES, GOST
gost-mac = DEFINES, GOST

KDF_DES = DEFINES, KDF_DES

WC_RSA_OAEP_PAD = DEFINES, RSA, none, none, none, none, none, RSA_PKCS1_OAEP_PADDING
WC_RSA_PKCSV15_PAD = DEFINES, RSA, none, none, none, none, none, RSA_PKCS1_PADDING
WC_RSA_PSS_PAD = DEFINES,  RSA, none, none, none, none, none, RSA_PKCS1_PSS_PADDING

GNUTLS_DIG_GOSTR_94 = DEFINES, GOST
GNUTLS_DIG_MD2 = DEFINES, MD2
GNUTLS_DIG_MD5 = DEFINES, MD5
GNUTLS_DIG_MD5_SHA1 = DEFINES, SHA1
GNUTLS_DIG_NULL = DEFINES,
GNUTLS_DIG_RMD160 = DEFINES, RIPEMD160
GNUTLS_DIG_SHA1 = DEFINES, SHA1
GNUTLS_DIG_SHA224 = DEFINES, SHA224
GNUTLS_DIG_SHA256 = DEFINES, SHA256
GNUTLS_DIG_SHA384 = DEFINES, SHA384
GNUTLS_DIG_SHA3_224 = DEFINES, SHA3_224
GNUTLS_DIG_SHA3_256 = DEFINES, SHA3_256
GNUTLS_DIG_SHA3_384 = DEFINES, SHA3_384
GNUTLS_DIG_SHA3_512 = DEFINES, SHA3_512
GNUTLS_DIG_SHA512 = DEFINES, SHA512
GNUTLS_DIG_SHAKE_128 = DEFINES, SHAKE128
GNUTLS_DIG_SHAKE_256 = DEFINES, SHAKE256
GNUTLS_DIG_STREEBOG_256 = DEFINES, STRIBOG_256
GNUTLS_DIG_STREEBOG_512 = DEFINES, STRIBOG_512
GNUTLS_DIG_UNKNOWN = DEFINES,

# hash functions
BLAKE2B = DEFINES, BLAKE2B
BLAKE2S = DEFINES, BLAKE2S

SHA3_224      =  DEFINES, SHA3_224
SHA3_256      =  DEFINES, SHA3_256
SHA3_384      =  DEFINES, SHA3_384
SHA3_512      =  DEFINES, SHA3_512
SHAKE128      =  DEFINES, SHAKE128
SHAKE256      =  DEFINES, SHAKE256
BLAKE2B_512   =  DEFINES, BLAKE2B_512
BLAKE2B_384   =  DEFINES, BLAKE2B_384
BLAKE2B_256   =  DEFINES, BLAKE2B_256
BLAKE2B_160   =  DEFINES, BLAKE2B_160
BLAKE2S_256   =  DEFINES, BLAKE2S_256
BLAKE2S_224   = DEFINES, BLAKE2S_224
BLAKE2S_160   = DEFINES, BLAKE2S_160
BLAKE2S_128   = DEFINES, BLAKE2S_128
BLAKE2B_128   = DEFINES, BLAKE2B_128
GOST = DEFINES, GOST
HAVAL = DEFINES, HAVAL
STRIBOG_256 = DEFINES, STRIBOG_256
STRIBOG_512 = DEFINES, STRIBOG_512
TIGER = DEFINES, TIGER
TIGER1 = DEFINES, TIGER1
TIGER2 = DEFINES, TIGER2
WHIRLPOOL = DEFINES, WHIRLPOOL
SIPHASH = DEFINES, SIPHASH

# symmetric encryption (block and stream ciphers)

TDES2 = DEFINES, TDES2
TDES3 = DEFINES, TDES3

TWOFISH = DEFINES, TWOFISH


# PRFs
CRAND = DEFINES, CRAND
OPENSSL_RANDOM = DEFINES, OPENSSL_RANDOM
GNUPG_RANDOM = DEFINES, GNUPG_RANDOM
WOLFSSL_RANDOM = DEFINES, WOLFSSL_RANDOM

#KDF
CRYPT_LIBC = DEFINES, CRYPT_LIBC
KERBEROS_KDF = DEFINES, KERBEROS_KDF
OPENSSL_KDF = DEFINES, OPENSSL_KDF
BCRYPT = DEFINES, BCRYPT
HMAC_KDF = DEFINES, HMAC_KDF
HMAC_SHA1_KDF = DEFINES, HMAC_SHA1_KDF
S2K = DEFINES, S2K
PBKDF1 = DEFINES, PBKDF1
PBKDF2 = DEFINES, PBKDF2
PBKDF2_SHA1 = DEFINES, PBKDF2_SHA1
SCRYPT = DEFINES, SCRYPT

WOLFSSL_KDF = DEFINES, WOLFSSL_KDF
MBEDTLS_KDF = DEFINES, MBEDTLS_KDF
PKCS12_PBE = DEFINES, PKCS12_PBE
ARGON2I = DEFINES, ARGON2I


HMAC_SHA1 = DEFINES, HMAC_SHA1
HMAC_SHA256 = DEFINES, HMAC_SHA256
HMAC-SHA512-256 = DEFINES, HMAC-SHA512-256
# authenticated not encryption
GMAC = DEFINES, GMAC
CMAC = DEFINES, CMAC

# Authenticated Encryption (authenticated encryption with associated data (AEAD) )
AEAD = DEFINES, AEAD
AES_GCM = DEFINES, AES_GCM
AES_CCM = DEFINES, AES_CCM
AES_OCB = DEFINES, AES_OCB
CHACHA20_POLY1305 = DEFINES, CHACHA20_POLY1305

# TLS
AES_128_CBC_HMAC_SHA1 = DEFINES, AES_128_CBC_HMAC_SHA1
AES_128_CBC_HMAC_SHA256 = DEFINES, AES_128_CBC_HMAC_SHA256
AES_256_CBC_HMAC_SHA1 = DEFINES, AES_256_CBC_HMAC_SHA1
AES_256_CBC_HMAC_2SHA56 = DEFINES, AES_256_CBC_HMAC_2SHA56
RC4_HMAC_MD5 = DEFINES, RC4_HMAC_MD5

#Public key cryptography
X509 = DEFINES, X509

ECB = DEFINES, none, none, ECB
CBC = DEFINES, none, none, CBC
OFB = DEFINES, none, none, OFB
CFB = DEFINES, none, none, CFB
CTR = DEFINES, none, none, CTR
# IEEE Std. 1619-2007 and described in NIST SP 800-38E
XTS = DEFINES, none, none, XTS
# extra symmetric #number = bit shift
CFB1 = DEFINES, none, none, CFB1
CFB8 = DEFINES, none, none, CFB8
CFB64 = DEFINES, none, none, CFB64
CFB128 = DEFINES, none, none, CFB128
OFB1 = DEFINES, none, none, OFB1
OFB8 = DEFINES, none, none, OFB8
OFB64 = DEFINES, none, none, OFB64
OFB128 = DEFINES, none, none, OFB128
# AES = RFC 3394 section 2.2.1 ("wrap"), Triple-DES = RFC 3217 Section 3.
WRAP = DEFINES, none, none, WRAP
CTS = DEFINES, none, none, CTS
# authenticated encryption
# CBC-MAC
CCM = DEFINES, none, none, CCM
GCM = DEFINES, none, none, GCM
POLY1305 = DEFINES, none, none, POLY1305
OCB = DEFINES, none, none, OCB

# TLS
SSL_TLS = DEFINES, SSL_TLS
DH  = DEFINES, DH
EC = DEFINES, EC